--- a/src/gcc/gm2/Make-lang.in
+++ b/src/gcc/gm2/Make-lang.in
@@ -107,7 +107,7 @@ gm2 m2 modula-2 modula2: xgm2$(exeext) x
 
 GM2_PROG_DEP=xgm2$(exeext) xgcc$(exeext) cc1gm2$(exeext)
 
-TEXI2HTML=python $(srcdir)/gm2/www/tools/texi2tr/src/texi2tr.py
+TEXI2HTML=python3 $(srcdir)/gm2/www/tools/texi2tr/src/texi2tr.py
 
 include gm2/config-make
 LIBSTDCXX=../$(TARGET_SUBDIR)/libstdc++-v3/src/.libs/libstdc++.a
@@ -238,7 +238,7 @@ $(objdir)/gm2/images/gnu.eps: $(srcdir)/
         fi
 
 gm2/gm2-libs.texi: gm2/SYSTEM-pim.texi gm2/SYSTEM-iso.texi gm2/Builtins.texi $(objdir)/gm2/gm2-libs-coroutines/SYSTEM.def
-	python $(srcdir)/gm2/tools-src/def2texi.py -uLibraries -s$(srcdir)/gm2 -b$(objdir)/gm2 > $(objdir)/gm2/gm2-libs.texi
+	python3 $(srcdir)/gm2/tools-src/def2texi.py -uLibraries -s$(srcdir)/gm2 -b$(objdir)/gm2 > $(objdir)/gm2/gm2-libs.texi
 
 gm2/gm2-ebnf.texi: gm2/gm2-auto gm2/ppg$(exeext) $(srcdir)/gm2/bnf/m2.bnf
 	./gm2/ppg$(exeext) -c -p -t -f $(srcdir)/gm2/bnf/m2.bnf > $@
--- a/src/gcc/gm2/examples/gravity/Makefile.in
+++ b/src/gcc/gm2/examples/gravity/Makefile.in
@@ -54,7 +54,7 @@ else
 LIBDIR=$(prefix)/lib
 endif
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 
 all: force
@@ -64,7 +64,7 @@ all: force
 pre-install: libtwoDsim.la
 
 run: pre-install
-	PYTHONPATH=`pwd` python $(srcdir)/testsim2.py
+	PYTHONPATH=`pwd` python$(PYTHON_VERSION) $(srcdir)/testsim2.py
 	$(SHELL) $(srcdir)/produce-avi
 
 libtwoDsim.la:  $(TWODSIM:%.mod=%.lo)
--- a/src/gcc/gm2/examples/gravity/README
+++ b/src/gcc/gm2/examples/gravity/README
@@ -5,4 +5,4 @@ netpbm.
 
 On Debian or Ubuntu you can:
 
-$ sudo apt-get install groff imagemagick python2.8-dev python swig gs netpbm mplayer
+$ sudo apt-get install groff imagemagick python3-dev swig gs netpbm mplayer
--- a/src/gcc/gm2/examples/pge/Makefile.in
+++ b/src/gcc/gm2/examples/pge/Makefile.in
@@ -56,7 +56,7 @@ OBJ_PATH=.:../../gm2-libs-iso:../../gm2/
 XGM2=../../../xgm2 -B../../../
 XGCC=../../../xgcc -B../../../
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "you need to use 'make pre-install' to build the examples using the locally built compiler"
@@ -70,7 +70,7 @@ all: force
 	maxima -b $< > $@
 
 %.m:  $(srcdir)/%.mxm
-	python $(srcdir)/max2code.py -o $@ $<
+	python$(PYTHON_VERSION) $(srcdir)/max2code.py -o $@ $<
 
 $(srcdir)/twoDsim.mod: circles.m rotating-line.m rotating-circles.m
 
@@ -90,10 +90,10 @@ twoDsim.o: $(srcdir)/twoDsim.mod
 	libtool --tag=CC --mode=compile gcc -g -I$(srcdir) -c $< -o $@
 
 run-whole-world: force
-	( python ../../../../../combined/gm2/gcc-versionno/gcc/gm2/examples/pge/pgepygame.py & ) ; sleep 1 ; ./whole-world
+	( python$(PYTHON_VERSION) ../../../../../combined/gm2/gcc-versionno/gcc/gm2/examples/pge/pgepygame.py & ) ; sleep 1 ; ./whole-world
 
 run-post-world: force
-	( python ../../../../../combined/gm2/gcc-versionno/gcc/gm2/examples/pge/pgepygame.py & ) ; sleep 1 ; ./post-world
+	( python$(PYTHON_VERSION) ../../../../../combined/gm2/gcc-versionno/gcc/gm2/examples/pge/pgepygame.py & ) ; sleep 1 ; ./post-world
 
 post-whole-world: circles.m force
 	gm2 -fm2-statistics -O3 -fsources -fiso -fcpp -I$(srcdir) -fm2-whole-program -fextended-opaque -g -o whole-world $(srcdir)/world.mod
@@ -117,13 +117,13 @@ libpgeif.la:  $(PGELIBSOURCES:%.mod=%.lo
 	cp .libs/libpgeif.so _pgeif.so
 
 output.raw: libpgeif.la
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/examples/exampleBoxes.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/examples/exampleBoxes.py
 
 playback: force
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/pgeplayback.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/pgeplayback.py
 
 boxes.raw:  libpgeif.la
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/examples/boxes.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/examples/boxes.py
 
 foo: circles.m $(OBJECTS)
 	gm2 $(GM2FLAGS) -fonlylink $(srcdir)/foo.mod
--- a/src/gcc/gm2/examples/pge/debugthis
+++ b/src/gcc/gm2/examples/pge/debugthis
@@ -1,5 +1,5 @@
-#!/bin/bash
+#!/bin/sh
 
 # python -m pdb max2code.py -v -o t.mod test.mxm
-python -m pdb fig.py foo.fig foo.mod
+python3 -m pdb fig.py foo.fig foo.mod
 
--- a/src/gcc/gm2/examples/pge/max2code
+++ b/src/gcc/gm2/examples/pge/max2code
@@ -1,3 +1,3 @@
 #!/bin/bash
 
-python max2code.py $*
+python3 max2code.py $*
--- a/src/gcc/gm2/examples/pge/runfig
+++ b/src/gcc/gm2/examples/pge/runfig
@@ -16,11 +16,11 @@ killall a.out
 rm *.png *.ms
 
 xfig $source
-if python fig.py $source $modname ; then
+if python3 fig.py $source $modname ; then
     if gm2 -c -I. -g -fiso $modname ; then
         rm `basename $modname .mod`.o
 	make foo.o ; make foo
-	python pge.py &
+	python3 pge.py &
 	sleep 1
 	./a.out
 	# ./produce-avi
--- a/src/gcc/gm2/examples/pge/runthis
+++ b/src/gcc/gm2/examples/pge/runthis
@@ -1,3 +1,3 @@
-#!/bin/bash
+#!/bin/sh
 
-python max2code.py -v -o t.mod test.mxm
+python3 max2code.py -v -o t.mod test.mxm
--- a/src/gcc/gm2/examples/swig/dual/Makefile.in
+++ b/src/gcc/gm2/examples/swig/dual/Makefile.in
@@ -30,7 +30,7 @@ XGM2=../../../../xgm2 -B../../../../
 XGPP=../../../../g++ -B../../../../
 XGCC=../../../../xgcc -B../../../../
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "or you can use 'make post-install' to build the examples after installing the compiler"
@@ -55,7 +55,7 @@ post-install: clean
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libfirst.la 
 
 	cp .libs/libfirst.so  _libfirst.so 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testdual.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testdual.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* *.i *.lst *.cpp *.lo *.la
--- a/src/gcc/gm2/examples/swig/exceptions/Makefile.in
+++ b/src/gcc/gm2/examples/swig/exceptions/Makefile.in
@@ -30,7 +30,7 @@ XGM2=../../../../xgm2 -B../../../../
 XGPP=../../../../g++
 XGCC=../../../../gcc
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "you can use 'make post-install' to build the examples after installing the compiler"
@@ -54,8 +54,8 @@ post-install: clean
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libtiny.la 
 
 	cp .libs/libtiny.so  _libtiny.so 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testtiny.py
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/stresstiny.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testtiny.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/stresstiny.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* tiny.py tiny.i *_m2.cpp
--- a/src/gcc/gm2/examples/swig/full-strlib/Makefile.in
+++ b/src/gcc/gm2/examples/swig/full-strlib/Makefile.in
@@ -30,7 +30,7 @@ XGM2=../../../../xgm2 -B../../../.. -B..
 XGPP=../../../../g++
 XGCC=../../../../xgcc
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "or you can use 'make post-install' to build the examples after installing the compiler"
@@ -56,9 +56,9 @@ strlib: force
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libStrLib.la 
 	cp .libs/libStrLib.so _StrLib.so
 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testlen.py
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testequ.py
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testcopy.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testlen.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testequ.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testcopy.py
 
 numberio: force
 	gm2 -I$(srcdir) -c -g -fswig $(srcdir)/../../../gm2-libs/NumberIO.mod
@@ -75,7 +75,7 @@ numberio: force
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libNumberIO.la 
 	cp .libs/libNumberIO.so _NumberIO.so
 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testnum.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testnum.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* StrLib.py NumberIO.py *.i *_m2.cpp
--- a/src/gcc/gm2/examples/swig/strio/Makefile.in
+++ b/src/gcc/gm2/examples/swig/strio/Makefile.in
@@ -30,7 +30,7 @@ XGM2=../../../../xgm2 -B../../../.. -B..
 XGPP=../../../../g++
 XGCC=../../../../xgcc
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "or you can use 'make post-install' to build the examples after installing the compiler"
@@ -55,7 +55,7 @@ strio: force
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libStrIO.la 
 	cp .libs/libStrIO.so _StrIO.so
 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/teststrio.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/teststrio.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* StrIO.py *.i *_m2.cpp
--- a/src/gcc/gm2/examples/swig/strlen/Makefile
+++ b/src/gcc/gm2/examples/swig/strlen/Makefile
@@ -1,11 +1,11 @@
-PYTHON_VERSION=2.5
+PYTHON_VERSION=3
 
 all: force
 	swig -python MyStrLib.i
 	gcc -c -fPIC MyStrLib_wrap.c -I/usr/include/python$(PYTHON_VERSION)
 	gm2 -fshared -c -fPIC -g MyStrLib.mod
 	gm2 -fmakeall -I. -fPIC -g -shared -fshared MyStrLib.mod MyStrLib_wrap.o -o _MyStrLib.so
-	python testlen.py
+	python$(PYTHON_VERSION) testlen.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* MyStrLib.py *.lst *_m2.cpp
--- a/src/gcc/gm2/examples/swig/strlib/Makefile.in
+++ b/src/gcc/gm2/examples/swig/strlib/Makefile.in
@@ -30,7 +30,7 @@ XGM2=../../../../xgm2 -B../../../.. -B..
 XGPP=../../../../g++
 XGCC=../../../../xgcc
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "you can use 'make post-install' to build the examples after installing the compiler"
@@ -54,7 +54,7 @@ post-install: clean
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libStrLib.la
 
 	cp .libs/libStrLib.so  _libStrLib.so 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testlen.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testlen.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* libStrLib.py *.i *.lst libStrLib_m2.cpp
--- a/src/gcc/gm2/examples/swig/tiny/Makefile.in
+++ b/src/gcc/gm2/examples/swig/tiny/Makefile.in
@@ -30,7 +30,7 @@ XGM2=../../../../xgm2 -B../../../../
 XGPP=../../../../g++ -B../../../../
 XGCC=../../../../xgcc -B../../../../
 
-PYTHON_VERSION=2.7
+PYTHON_VERSION=3
 
 all: force
 	@echo "or you can use 'make post-install' to build the examples after installing the compiler"
@@ -54,7 +54,7 @@ post-install: clean
              -rpath `pwd` -lgm2 -lstdc++ -lpth -lm -o libtiny.la 
 
 	cp .libs/libtiny.so  _libtiny.so 
-	PYTHONPATH=.:$(srcdir) python $(srcdir)/testtiny.py
+	PYTHONPATH=.:$(srcdir) python$(PYTHON_VERSION) $(srcdir)/testtiny.py
 
 clean: force
 	$(RM) -f *.o *.so a.out *.pyc *~ *_wrap* tiny.py *.i *.lst *.cpp
--- a/src/gcc/gm2/www/Makefile.in
+++ b/src/gcc/gm2/www/Makefile.in
@@ -32,7 +32,7 @@ TEXISRC = $(srcdir)/../../gm2/gm2.texi
 #          $(objdir)/gm2/Builtins.texi \
 #          $(objdir)/gm2/version.texi
 
-TEXI2HTML=python $(srcdir)/tools/texi2tr/src/texi2tr.py
+TEXI2HTML=python3 $(srcdir)/tools/texi2tr/src/texi2tr.py
 
 OUTPUTS=download.html homepage.html license.html platforms.html \
         about.html release.html users.html texi2tr.css \
--- a/src/gcc/gm2/tools-src/def2texi.py
+++ b/src/gcc/gm2/tools-src/def2texi.py
@@ -24,7 +24,6 @@
 import sys
 import os
 import glob
-import string
 import getopt
 
 libraryClassifications = [['gm2-libs','Base libraries',
@@ -95,7 +94,7 @@ def displayMenu():
 #
 
 def removeInitialComments (file, line):
-    while (string.find(line, "*)") == -1):
+    while (line.find("*)") == -1):
         line = file.readline()
         
 #
@@ -104,30 +103,29 @@ def removeInitialComments (file, line):
 #
 
 def removeFields (file, line):
-    while (string.find(line, "*)") == -1):
-        if (string.find(line, "Author") != -1) and (string.find(line, ":") != -1):
+    while (line.find("*)") == -1):
+        if (line.find("Author") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "Last edit") != -1) and (string.find(line, ":") != -1):
+        elif (line.find("Last edit") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "LastEdit") != -1) and (string.find(line, ":") != -1):
+        elif (line.find("LastEdit") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "Last update") != -1) and (string.find(line, ":") != -1):
+        elif (line.find("Last update") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "Date") != -1) and (string.find(line, ":") != -1):
+        elif (line.find("Date") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "Title") != -1) and (string.find(line, ":") != -1):
+        elif (line.find("Title") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "Revision") != -1) and (string.find(line, ":") != -1):
+        elif (line.find("Revision") != -1) and (line.find(":") != -1):
             line = file.readline()
-        elif (string.find(line, "System") != -1) and (string.find(line, ":") != -1) and (string.find(line, "Description:") == -1):
+        elif (line.find("System") != -1) and (line.find(":") != -1) and (line.find("Description:") == -1):
             line = file.readline()
-        elif (string.find(line, "SYSTEM") != -1) and (string.find(line, ":") != -1) and (string.find(line, "Description:") == -1):
+        elif (line.find("SYSTEM") != -1) and (line.find(":") != -1) and (line.find("Description:") == -1):
             line = file.readline()
         else:
-	    print((string.replace(string.replace(string.rstrip(line),
-                                            "{", "@{"), "}", "@}")))
+            print((line.rstrip().replace("{", "@{").replace("}", "@}")))
             line = file.readline()
-    print((string.rstrip(line)))
+    print((line.rstrip()))
 
 
 #
@@ -137,7 +135,7 @@ def removeFields (file, line):
 def checkIndex (line):
     global inVar, inType, inConst
     
-    words = string.split(line)
+    words = line.split()
     procedure = ""
     if (len(words)>1) and (words[0] == "PROCEDURE"):
         inConst = False
@@ -168,42 +166,42 @@ def checkIndex (line):
         inVar = False
 
     if inVar:
-        words = string.split(line, ',')
+        words = line.split(',')
         for word in words:
-            word = string.lstrip(word)
+            word = word.lstrip()
             if word != "":
-                if string.find(word, ':') == -1:
+                if word.find(':') == -1:
                     print(("@findex " + word + " (var)"))
                 elif len(word)>0:
-                    var = string.split(word, ':')
+                    var = word.split(':')
                     if len(var)>0:
                         print(("@findex " + var[0] + " (var)"))
 
     if inType:
-        words = string.lstrip(line)
-        if string.find(words, '=') != -1:
-            word = string.split(words, "=")
+        words = line.lstrip()
+        if words.find('=') != -1:
+            word = words.split("=")
             if (len(word[0])>0) and (word[0][0] != '_'):
-                print(("@findex " + string.rstrip(word[0]) + " (type)"))
+                print(("@findex " + word[0].rstrip() + " (type)"))
         else:
-            word = string.split(words)
+            word = words.split()
             if (len(word)>1) and (word[1] == ';'):
                 # hidden type
                 if (len(word[0])>0) and (word[0][0] != '_'):
-                    print(("@findex " + string.rstrip(word[0]) + " (type)"))
+                    print(("@findex " + word[0].rstrip() + " (type)"))
 
     if inConst:
-        words = string.split(line, ';')
+        words = line.split(';')
         for word in words:
-            word = string.lstrip(word)
+            word = word.lstrip()
             if word != "":
-                if string.find(word, '=') != -1:
-                    var = string.split(word, '=')
+                if word.find('=') != -1:
+                    var = word.split('=')
                     if len(var)>0:
                         print(("@findex " + var[0] + " (const)"))
 
     if procedure != "":
-        name = string.split(procedure, "(")
+        name = procedure.split("(")
         if name[0] != "":
             proc = name[0]
             if proc[-1] == ";":
@@ -221,32 +219,31 @@ def parseDefinition (dir, source, build,
     f = open(findFile(dir, build, source, file), 'r')
     initState()
     line = f.readline()
-    while (string.find(line, "(*") != -1):
+    while (line.find("(*") != -1):
         removeInitialComments(f, line)
         line = f.readline()
 
-    while (string.find(line, "DEFINITION") == -1):
+    while (line.find("DEFINITION") == -1):
         line = f.readline()
 
     print("@example")
-    print((string.rstrip(line)))
+    print((line.rstrip()))
     line = f.readline()
-    if len(string.rstrip(line)) == 0:
-        print((string.replace(string.replace(string.rstrip(line),
-                                            "{", "@{"), "}", "@}")))
+    if len(line.rstrip()) == 0:
+        print((line.rstrip().replace("{", "@{").replace("}", "@}")))
         line = f.readline()
-        if (string.find(line, "(*") != -1):
+        if (line.find("(*") != -1):
             removeFields(f, line)
         else:
-            print((string.rstrip(line)))
+            print((line.rstrip()))
     else:
-        print((string.rstrip(line)))
+        print((line.rstrip()))
 
     line = f.readline()
     while line:
-	line = string.rstrip(line)
-	checkIndex(line)
-        print((string.replace(string.replace(line, "{", "@{"), "}", "@}")))
+        line = line.rstrip()
+        checkIndex(line)
+        print((line.replace("{", "@{").replace("}", "@}")))
         line = f.readline()
     print("@end example")
     if needPage:
@@ -282,7 +279,7 @@ def doCat (name):
     file = open(name, 'r')
     line = file.readline()
     while line:
-        print((string.rstrip(line)))
+        print((line.rstrip()))
         line = file.readline()
     file.close()
 
