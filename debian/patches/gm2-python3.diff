# DP: Convert gm2 python scripts to Python3.

--- a/src/gcc/gm2/examples/gravity/testsim.py
+++ b/src/gcc/gm2/examples/gravity/testsim.py
@@ -33,9 +33,9 @@ c2 = fix(c2)
 gravity(-9.81)
 fps(24.0*4.0)
 replayRate(24.0)
-print "creating frames"
+print("creating frames")
 try:
     simulateFor(1.0)
-    print "all done"
+    print("all done")
 except:
-    print "exception raised"
+    print("exception raised")
--- a/src/gcc/gm2/examples/gravity/testsim2.py
+++ b/src/gcc/gm2/examples/gravity/testsim2.py
@@ -43,9 +43,9 @@ for x in [0.4, 0.7]:
 gravity(-9.81)
 fps(24.0*4.0)
 replayRate(24.0)
-print "creating frames"
+print("creating frames")
 try:
     simulateFor(3.0)
-    print "all done"
+    print("all done")
 except:
-    print "exception raised"
+    print("exception raised")
--- a/src/gcc/gm2/examples/pge/examples/boxes.py
+++ b/src/gcc/gm2/examples/pge/examples/boxes.py
@@ -2,7 +2,7 @@
 
 import pge, sys
 
-print "starting boxes"
+print("starting boxes")
 pge.batch ()
 
 wood_light = pge.rgb (166.0/256.0, 124.0/256.0, 54.0/256.0)
@@ -14,7 +14,7 @@ boarder = 0.01
 
 
 def placeBoarders (thickness, color):
-    print "placeBoarders"
+    print("placeBoarders")
     pge.box (0.0, 0.0, 1.0, thickness, color).fix ()
     pge.box (0.0, 0.0, thickness, 1.0, color).fix ()
     pge.box (1.0-thickness, 0.0, thickness, 1.0, color).fix ()
@@ -31,5 +31,5 @@ def main ():
     pge.run (3.0)
     pge.finish ()
 
-print "before main()"
+print("before main()")
 main ()
--- a/src/gcc/gm2/examples/pge/examples/exampleBoxes.py
+++ b/src/gcc/gm2/examples/pge/examples/exampleBoxes.py
@@ -3,7 +3,7 @@
 import pge, sys
 # import pgemacro
 
-print "starting exampleBoxes"
+print("starting exampleBoxes")
 pge.batch ()
 
 t = pge.rgb (1.0/2.0, 2.0/3.0, 3.0/4.0)
@@ -21,19 +21,19 @@ gap = 0.01
 
 
 def play_wood (o):
-    print "play_wood - wants to play bounce.wav"
+    print("play_wood - wants to play bounce.wav")
     pge.play ("/home/gaius/Sandpit/cluedo/sounds/bounce.wav")
 
 def play_crack (o):
-    print "play_crack - wants to play crack-single.wav"
+    print("play_crack - wants to play crack-single.wav")
     pge.play ("/home/gaius/Sandpit/penguin-tower/sounds/crack-single.wav")
 
 def play_bounce (o):
-    print "play_bounce - wants to play cardsnap.wav"
+    print("play_bounce - wants to play cardsnap.wav")
     pge.play ("/home/gaius/Sandpit/cluedo/sounds/cardsnap.wav")
 
 def placeBoarders (thickness, color):
-    print "placeBoarders"
+    print("placeBoarders")
     e1 = pge.box (0.0, 0.0, 1.0, thickness, color).fix ()
     e2 = pge.box (0.0, 0.0, thickness, 1.0, color).fix ()
     e3 = pge.box (1.0-thickness, 0.0, thickness, 1.0, color).fix ()
@@ -56,34 +56,34 @@ def is_odd (e):
 def crate_split (p):
     global gap
 
-    print "crate_split", p
+    print(("crate_split", p))
     pge.dump_world ()
     e = p.get_param ()
-    print "after get_param"
+    print("after get_param")
     w = e[1] / 2
     wg = w - gap
     if wg<0.0:
-        print "error gap must be >= 0.0 and not", wg
+        print(("error gap must be >= 0.0 and not", wg))
         sys.exit (1)
     if e != None:
         if e[0] == 0:
-            print "crate piece completely gone"
+            print("crate piece completely gone")
             # at the end of 6 collisions the crates disappear
             p.rm ()
             play_crack (p)
         elif is_odd (e[0]):
             pge.process_event ()  # update the velocities of objects (immediately after collision)
-            print "crate sub divides"
+            print("crate sub divides")
             # subdivide into smaller crates, every odd bounce
             m = p.get_mass ()
-            print "mass of crate is", m
+            print(("mass of crate is", m))
             pge.dump_world ()
-            print "get crate colour"
+            print("get crate colour")
             c = p.get_colour ()
-            print "colour of crate is", c
+            print(("colour of crate is", c))
             pge.dump_world ()
-            print e
-            print "get_xpos"
+            print(e)
+            print("get_xpos")
             x = p.get_xpos () - e[1]/2
             pge.dump_world ()
             y = p.get_ypos () - e[1]/2
@@ -91,22 +91,22 @@ def crate_split (p):
             vy = p.get_yvel ()
             ax = p.get_xaccel ()
             ay = p.get_yaccel ()
-            print "**************** x, y, w, wg = ", x, y, w, wg, vx, vy, ax, ay
+            print(("**************** x, y, w, wg = ", x, y, w, wg, vx, vy, ax, ay))
             pge.dump_world ()
-            print "rm", p
+            print(("rm", p))
             p.rm ()
-            print "finished rm, python dumping world"
+            print("finished rm, python dumping world")
             pge.dump_world ()
             for v in [[0, 0], [0, w], [w, 0], [w, w]]:
-                print "creating sub box", v, "gap =", wg
+                print(("creating sub box", v, "gap =", wg))
                 b = pge.box (v[0]+x, v[1]+y, wg, wg, c).mass (m).on_collision (crate_split).velocity (vx, vy).accel (ax, ay)
-                print "set_param", [e[0]-1, w]
+                print(("set_param", [e[0]-1, w]))
                 b.set_param ([e[0]-1, w])
                 pge.dump_world ()
-            print "play_crack", p
+            print(("play_crack", p))
             play_crack (p)
         else:
-            print "crate bounces without breaking"
+            print("crate bounces without breaking")
             # allow collision (bounce) without splitting every even bounce
             p.set_param ([e[0]-1, e[1]])
             play_bounce (p)
@@ -118,11 +118,11 @@ def main ():
     # b = placeBall (0.5, 0.5, 0.02)
     # b.mass (1.0).on_collision (play_bounce).velocity (0.9, 0.0)
     crate (0.6, 0.6, 0.2)
-    print "before run"
+    print("before run")
     pge.gravity ()
     pge.dump_world ()
     pge.run (10.0)
     pge.finish ()
 
-print "before main()"
+print("before main()")
 main ()
--- a/src/gcc/gm2/examples/pge/examples/triangle.py
+++ b/src/gcc/gm2/examples/pge/examples/triangle.py
@@ -2,7 +2,7 @@
 
 import pge, sys
 
-print "starting triangle"
+print("starting triangle")
 pge.batch ()
 
 t = pge.rgb (1.0/2.0, 2.0/3.0, 3.0/4.0)
@@ -17,7 +17,7 @@ gap = 0.01
 
 
 def placeBoarders (thickness, color):
-    print "placeBoarders"
+    print("placeBoarders")
     e1 = pge.box (0.0, 0.0, 1.0, thickness, color).fix ()
     e2 = pge.box (0.0, 0.0, thickness, 1.0, color).fix ()
     e3 = pge.box (1.0-thickness, 0.0, thickness, 1.0, color).fix ()
@@ -38,11 +38,11 @@ def main ():
     c = placeBall (0.41, 0.89, 0.05).mass (1)
     l = placeTriangle ([0.3, 0.3], [0.5, 0.3], [0.4, 0.4])
     b1, b2, b3, b4 = placeBoarders (boarder, wood_dark)
-    print "before run"
+    print("before run")
     pge.gravity ()
     pge.dump_world ()
     pge.run (3.0)
     pge.finish ()
 
-print "before main()"
+print("before main()")
 main ()
--- a/src/gcc/gm2/examples/pge/fig.py
+++ b/src/gcc/gm2/examples/pge/fig.py
@@ -4,11 +4,11 @@ import sys
 import getopt
 
 # object codes
-fig_o_customColor, fig_o_ellipse, fig_o_polygon, fig_o_spline, fig_o_text, fig_o_arc, fig_o_compound_begin = range(7)
+fig_o_customColor, fig_o_ellipse, fig_o_polygon, fig_o_spline, fig_o_text, fig_o_arc, fig_o_compound_begin = list(range(7))
 fig_o_compound_end = -6
 
 # polygon type constants
-fig_pt_polyline, fig_pt_box, fig_pt_polygon, fig_pt_arcbox, fig_pt_picturebbox = range(1, 6)
+fig_pt_polyline, fig_pt_box, fig_pt_polygon, fig_pt_arcbox, fig_pt_picturebbox = list(range(1, 6))
 
 
 #
@@ -16,7 +16,7 @@ fig_pt_polyline, fig_pt_box, fig_pt_polygon, fig_pt_arcbox, fig_pt_picturebbox =
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 colorNo = 0
 
@@ -54,7 +54,7 @@ class fig:
     #
     def readContents (self):
         self.contents = open(self.filename, 'r').readlines()
-        print self.contents
+        print(self.contents)
 
     def error (self, message):
         printf("%s:%d:%s\n", self.filename, self.lineno, message)
@@ -133,19 +133,19 @@ class fig:
         self.skipLine ()
         if characteristics[-1] == "2":
             points = self.contents[0].split()
-            print "force points are", points
+            print("force points are", points)
             if characteristics[-3] == "0" and characteristics[-2] == "1":
-                print "found force backward"
+                print("found force backward")
                 self.forces += [["force", "backward", points]]
             elif characteristics[-3] == "1" and characteristics[-2] == "0":
-                print "found force forward"
+                print("found force forward")
                 self.forces += [["force", "forward", points]]
         elif characteristics[2] == "0":
             # solid, we treat as fixed
-            print "found fixed polygon", points
+            print("found fixed polygon", points)
             self.objects += [["fixed", "polygon", points]]
         else:
-            print "found non fixed polygon", points
+            print("found non fixed polygon", points)
             self.objects += [["nonfixed", "polygon", points]]
 
 
@@ -156,12 +156,12 @@ class fig:
     def parseEllipse32 (self):
         ellipse = self.contents[0].split ()
         if ellipse[2] == "0":
-            print "found fixed circle", ellipse[-8:-4]
+            print("found fixed circle", ellipse[-8:-4])
             # solid (ellipse) treat as a fixed circle
             self.objects += [["fixed", "circle", ellipse[-8:-4]]]
         else:
             # treat as a nonfixed circle
-            print "found non fixed circle", ellipse[-8:-4]
+            print("found non fixed circle", ellipse[-8:-4])
             self.objects += [["nonfixed", "circle", ellipse[-8:-4]]]
         self.skipLine ()
 
@@ -260,7 +260,7 @@ class fig:
     def findExtents (self):
         self.minp, self.maxp = -1, -1
         for o in self.objects:
-            print "finding extent of", o
+            print("finding extent of", o)
             self.minp, self.maxp = self.examineExtent(o)
         return self.minp, self.maxp
 
@@ -276,7 +276,7 @@ class fig:
 
     def doFract (self, n):
         if (n<-100) or (n>100):
-            print n, "error"
+            print(n, "error")
             # self.error("incorrect position calculated")
         if n == 0:
             self.fo.write("zero()")
@@ -336,7 +336,7 @@ class fig:
    popWorld.mass(cardinal(1)) ;
 """)
             if self.forces != []:
-                print self.forces[0]
+                print(self.forces[0])
                 self.doForce (self.forces[0])
             self.fo.write("""
    popWorld.populate(m, FALSE, TRUE) ;
@@ -345,16 +345,16 @@ class fig:
 
     def checkVectorSum (self, x0, x1, x2):
         ox = x0
-        print "x:", x0, x1, x2,
+        print("x:", x0, x1, x2, end=' ')
         tx = x0 + x1 + x2
         if tx<0:
             x0 += (-tx)
         elif tx>100:
             x0 -= (tx-100)
         if ox == x0:
-            print
+            print()
         else:
-            print "  ->", x0, x1, x2
+            print("  ->", x0, x1, x2)
         return x0, x1, x2
 
 
@@ -429,9 +429,9 @@ class fig:
 
     def generateModula2 (self):
         if self.objects != []:
-            print "objects are: ", self.objects
+            print("objects are: ", self.objects)
             self.minp, self.maxp = self.findExtents()
-            print "max extents are:", self.minp, self.maxp
+            print("max extents are:", self.minp, self.maxp)
             self.createModule()
 
     def doStyle (self, style):
@@ -547,7 +547,7 @@ BEGIN
 #
 
 def usage (value):
-    print "fig [-h] inputfile outputfile"
+    print("fig [-h] inputfile outputfile")
     sys.exit(value)
 
 
--- a/src/gcc/gm2/examples/pge/max2code.py
+++ b/src/gcc/gm2/examples/pge/max2code.py
@@ -20,7 +20,7 @@ verbose     = False
 #
 
 def usage (value):
-    print "max2code [-h][-v][-o outputfile][-l c][-l m2][--lang=m2][--lang=c] inputfile"
+    print("max2code [-h][-v][-o outputfile][-l c][-l m2][--lang=m2][--lang=c] inputfile")
     sys.exit(value)
 
 
@@ -60,10 +60,10 @@ def main ():
 
     parseArgs()
     if outputFile == "":
-        print "no output file specified"
+        print("no output file specified")
         usage(1)
     if inputFile == "":
-        print "no input file specified"
+        print("no input file specified")
         usage(1)
     else:
         p = parse(inputFile, outputFile, defaultLang, verbose)
--- a/src/gcc/gm2/examples/pge/mxmmaxima.py
+++ b/src/gcc/gm2/examples/pge/mxmmaxima.py
@@ -38,7 +38,7 @@ class parse:
     def getPolynomials (self, nTerms):
         if self.expression():
             e = self.expressionStack.pop()
-            for n in reversed(range(nTerms)):
+            for n in reversed(list(range(nTerms))):
                 self.terms += [e.collectPolynomial(n, 't')]
             self.terms.reverse()
             return self.terms
@@ -331,7 +331,7 @@ class parse:
     def syntaxError (self, message):
         mystop ()
         printHeader(self.inputFile, self.lineNo)
-        print self.contents
+        print((self.contents))
 
         j = self.columnNo-len(self.tok)
         s = " " * j
@@ -339,7 +339,7 @@ class parse:
         s += " "
         s += message
         printHeader(self.inputFile, self.lineNo)
-        print s
+        print(s)
         sys.exit(1)
 
 
@@ -349,10 +349,10 @@ class parse:
 
     def printToken (self, token):
         printHeader(self.inputFile, self.lineNo-1)
-        print self.contents
+        print((self.contents))
 
         j = self.columnNo-len(token)
         s = " " * j
         s += "^" * len(token)
         printHeader(self.inputFile, self.lineNo)
-        print s
+        print(s)
--- a/src/gcc/gm2/examples/pge/mxmout.py
+++ b/src/gcc/gm2/examples/pge/mxmout.py
@@ -8,7 +8,7 @@
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 
 #
--- a/src/gcc/gm2/examples/pge/mxmparser.py
+++ b/src/gcc/gm2/examples/pge/mxmparser.py
@@ -25,7 +25,7 @@ commentLeader = '//'
 
 def internalError (message):
     stop()
-    print message
+    print(message)
     sys.exit(1)
 
 
@@ -116,8 +116,8 @@ class parse:
             o = "outfile.m"
             m = open(o, 'r').readlines()
             if verbose:
-                print "output from maxima is:"
-                print string.join(m, '')
+                print("output from maxima is:")
+                print((string.join(m, '')))
             c = "rm %s\n" % i
             os.system(c)
             c = "rm %s\n" % o
@@ -238,7 +238,7 @@ class parse:
         else:
             printf(alternative)
         printf("\n")
-        print self.contents
+        print((self.contents))
 
 
     #
--- a/src/gcc/gm2/examples/pge/mxmtree.py
+++ b/src/gcc/gm2/examples/pge/mxmtree.py
@@ -6,7 +6,7 @@ from mxmutils import *
 
 
 defaultLang = "c"
-atom, node = range(2)
+atom, node = list(range(2))
 output = ""
 
 
@@ -15,7 +15,7 @@ output = ""
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 
 #
--- a/src/gcc/gm2/examples/pge/pge.py
+++ b/src/gcc/gm2/examples/pge/pge.py
@@ -9,10 +9,10 @@ import math
 from pygame.locals import *
 
 
-colour_t, box_t, circle_t, fb_box_t, fb_circle_t, fb_text_t = range (6)
+colour_t, box_t, circle_t, fb_box_t, fb_circle_t, fb_text_t = list(range(6))
 id2ob = {}
 ob2id = {}
-batch_d, pyg_d = range (2)
+batch_d, pyg_d = list(range(2))
 device = None
 opened = False
 output = None
@@ -49,14 +49,14 @@ font = None
 #
 
 def printf (format, *args):
-    print str (format) % args,
+    print(str (format) % args, end=' ')
 
 
 def debugf (format, *args):
     global debugging
 
     if debugging:
-        print str (format) % args,
+        print(str (format) % args, end=' ')
 
 def errorf (format, *args):
     m = str (format) % args
@@ -148,7 +148,7 @@ class object:
 
         self._check_colour ()
         i = pgeif.h2l (self._get_pgeif_colour ())
-        if idTOcol.has_key (i):
+        if i in idTOcol:
             return idTOcol[i]
         internalf ("3 colour triple should have been defined")
 
@@ -197,7 +197,7 @@ class object:
         _emit_fract (self.o [1])  #  y pos
         _emit_fract (self.o [2])  #  radius
         _emit_short (self.o [3])  #  colour
-        print "_emit_fill_circle, colour is ", self.o [3], self.o [0], self.o [1], self.o [2]
+        print("_emit_fill_circle, colour is ", self.o [3], self.o [0], self.o [1], self.o [2])
 
     def _emit_fill_polygon (self):
         output.write (struct.pack ("3s", "dP"))
@@ -225,7 +225,7 @@ class object:
         self._check_type ([box_t, circle_t], "assign a velocity to a")
         self._check_not_fixed ("assign a velocity")
         self._check_not_deleted ("a velocity")
-        print "velocity for object", self.o, vx, vy
+        print("velocity for object", self.o, vx, vy)
         self.o = self._check_same (pgeif.velocity (self.o, vx, vy))
         return self
 
@@ -242,7 +242,7 @@ class object:
         self._check_no_mass ("cannot fix " + self._name () + " as it has a mass")
         self.fixed = True
         self.o = self._check_same (pgeif.fix (self.o))
-        print "fix", self.o
+        print("fix", self.o)
         return self
 
     def mass (self, m):
@@ -253,7 +253,7 @@ class object:
             errorf ("cannot give value None as the mass\n")
         self.kg = m
         self.o = self._check_same (pgeif.mass (self.o, m))
-        print "mass", self.o
+        print("mass", self.o)
         return self
 
     def apply_impulse (self, unit_vec, magnitude):
@@ -262,13 +262,13 @@ class object:
         self._check_not_deleted (" an impulse")
         if (magnitude is None) or (unit_vec is None):
             return
-        print "magnitude", magnitude, "vector", unit_vec
+        print("magnitude", magnitude, "vector", unit_vec)
         pgeif.apply_impulse (self.o, unit_vec[0], unit_vec[1], magnitude)
         return self
 
     def on_collision_with (self, another, p):
         if debugging:
-            print "ok registering call back", p, another
+            print("ok registering call back", p, another)
         self.collisionp = p
         self.collisionWith = another
         return self
@@ -318,14 +318,14 @@ class object:
 
     def _collision (self, between, e):
         if debugging:
-            print "collision seen, between:", between
+            print("collision seen, between:", between)
         if self.collisionWith == []:
             if self.collisionp != None:
                 if debugging:
-                    print "before collisionp"
+                    print("before collisionp")
                 self.collisionp (self, e)
                 if debugging:
-                    print "after collisionp"
+                    print("after collisionp")
         else:
             for c in self.collisionWith:
                 for b in between:
@@ -396,7 +396,7 @@ class object:
         return pgeif.get_yaccel (self.o)
 
     def put_xvel (self, f):
-        print "put_xvel on a", self._name ()
+        print("put_xvel on a", self._name ())
         self._check_type ([box_t, circle_t], "put the xvel")
         return pgeif.put_xvel (self.o, f)
 
@@ -425,14 +425,14 @@ def _colspace (f):
 def rgb (r, g, b):
     global idTOcol
 
-    print "in rgb (", r, g, b, ")"
+    print("in rgb (", r, g, b, ")")
     c = pgeif.rgb (float(r), float(g), float(b))
-    print "after pgeif.rgb ->", c
+    print("after pgeif.rgb ->", c)
     o = object (colour_t, [float(r), float(g), float(b), c])
     o._check_colour ()
     c = pgeif.h2l (c)
     idTOcol[c] = (_colspace (r), _colspace (g), _colspace (b))
-    print "define colour triple as:", idTOcol[c]
+    print("define colour triple as:", idTOcol[c])
     return o
 
 def white ():
@@ -462,18 +462,18 @@ def text (x, y, s, c, size, level):
 
 
 def box (x, y, w, h, c, level = 0):
-    print "box:", x, y, w, h, c, level
+    print("box:", x, y, w, h, c, level)
     c._param_colour ("fifth parameter to box is expected to be a colour")
     if level == 0:
         id = pgeif.box (x, y, w, h, c._get_pgeif_colour ())
-        print "box colour =", c, c._get_pgeif_colour ()
+        print("box colour =", c, c._get_pgeif_colour ())
         ob = object (box_t, id, c, level)
         ob.set_width (w)
         debugf ("box ")
         _register (id, ob)
     else:
         ob = object (fb_box_t, [x, y, x+w, y, x+w, y+h, x+w, y+h, x, y+h, c._get_pgeif_colour ()], c, level)
-        print "box colour =", c, c._get_pgeif_colour ()
+        print("box colour =", c, c._get_pgeif_colour ())
         _add (ob, level)
     return ob
 
@@ -516,30 +516,30 @@ def _add (ob, level):
             background += [level]
             background.sort ()
 
-    if levels.has_key (level):
+    if level in levels:
         levels[level] += [ob]
     else:
         levels[level] = [ob]
-    print levels[level]
+    print(levels[level])
 
 
 def _sub (ob, level):
     global foreground, background
 
-    if levels.has_key (level):
+    if level in levels:
         levels[level].remove (ob)
 
     if level > 0:
         f = []
         for l in foreground:
-            if levels.has_key (l):
+            if l in levels:
                 f += [l]
         foreground = f
         foreground.sort ()
     else:
         b = []
         for l in background:
-            if levels.has_key (l):
+            if l in levels:
                 b += [l]
         background = b
         background.sort ()
@@ -549,13 +549,13 @@ def circle (x, y, r, c, level = 0):
     c._param_colour ("fourth parameter to box is expected to be a colour")
     if level == 0:
         id = pgeif.circle (x, y, r, c._get_pgeif_colour ())
-        print "circle id =", id
+        print("circle id =", id)
         debugf ("circle ")
         ob = object (circle_t, id, c, level)
         _register (id, ob)
     else:
-        print "circle, colour =", c
-        print "pge: colour", c._get_pgeif_colour ()
+        print("circle, colour =", c)
+        print("pge: colour", c._get_pgeif_colour ())
         ob = object (fb_circle_t, [x, y, r, c._get_pgeif_colour ()], c, level)
         _add (ob, level)
     return ob
@@ -636,7 +636,7 @@ def draw_background ():
             for o in levels[l]:
                 o._draw ()
 
-no_event, frame_event, collision_event, function_event, final_event = range (5)
+no_event, frame_event, collision_event, function_event, final_event = list(range(5))
 
 class event:
     def __init__ (self, t, d, l):
@@ -706,14 +706,14 @@ class event:
             self._handle_frame_buffer ()
             _collision (self._between (), self)
         elif self._type == function_event:
-            print "_process found timer_event", self.__id
+            print("_process found timer_event", self.__id)
             i = self.__id
-            if id2func.has_key (i):
-                print "function", i, "about to be called"
+            if i in id2func:
+                print("function", i, "about to be called")
                 id2func [i] ()
-                print "function", i, "finished"
+                print("function", i, "finished")
             else:
-                print "function", i, "has been cancelled"
+                print("function", i, "has been cancelled")
     def _handle_frame_buffer (self):
         cData = pgeif.get_cbuf ()
         debugf ("cData len = %d\n", len (cData))
@@ -741,7 +741,7 @@ class event:
     def _get_time (self):
         return self.__etime
     def collision_between (self):
-        print self._between ()
+        print(self._between ())
         return self._between ()
     def cancel (self):
         self._cancelled = True
@@ -827,28 +827,28 @@ def _add_relative (r):
 pge_event_queue = []
 
 def display_element (e, t):
-    print "[", e[0], "ms ",
+    print("[", e[0], "ms ", end=' ')
     if e[1]._type == frame_event:
-        print "displayframe",
+        print("displayframe", end=' ')
     elif e[1]._type == collision_event:
-        print "collision",
+        print("collision", end=' ')
     elif e[1]._type == function_event:
-        print "timer",
+        print("timer", end=' ')
     else:
-        print "final",
-    print " at", e[0] + (int) (t * 1000.0), "ms",
-    print "], ",
+        print("final", end=' ')
+    print(" at", e[0] + (int) (t * 1000.0), "ms", end=' ')
+    print("], ", end=' ')
 
 def display_event_queue (q):
     if q == []:
-        print "event queue is empty"
+        print("event queue is empty")
     else:
-        print "event queue: "
+        print("event queue: ")
         t = pgeif.get_time ()
         for e in q:
             display_element (e, t)
             t += e[1]._get_time ()
-        print ""
+        print("")
 
 prev_event_time = 0.0
 
@@ -869,7 +869,7 @@ def _wait_for_event ():
     global pge_event_queue, slow_down_factor, device, _record, debugging
 
     if debugging:
-        print "_wait_for_event, pge_event_queue ="
+        print("_wait_for_event, pge_event_queue =")
         display_event_queue (pge_event_queue)
     if device == pyg_d:
         pygame.event.set_allowed (None)
@@ -903,7 +903,7 @@ def at_time (t, p):
 
 def at_cancel (i):
     global id2func
-    if id2func.has_key (i):
+    if i in id2func:
         del id2func[i]
     else:
         error ("at_cancel cannot delete function %d as it no longer exists\n", i)
@@ -933,10 +933,10 @@ def pyg_draw_frame (cdata, clength, fdata, flength):
     while f.left () >= 3:
         header = struct.unpack ("3s", f.read (3))[0]
         header = header[:2]
-        if call.has_key (header):
+        if header in call:
             f = call[header] (f)
         else:
-            print "not understood header =", header
+            print("not understood header =", header)
             sys.exit (1)
     # printf ("drawing foreground\n")
     if flength > 0:
@@ -1086,7 +1086,7 @@ def runpy (t=-1, ep=None):
                 _process (pe)
                 ev = _get_next_event ()
                 nev = _post_event (ev, ev._get_time ())
-            elif pyevent2func.has_key (e.type):
+            elif e.type in pyevent2func:
                 pyevent2func[e.type] (e)
         # what does this code do??
         # elif ep != None:
@@ -1190,8 +1190,8 @@ def load_sound (name):
         return NoneSound()
     try:
         sound = pygame.mixer.Sound(name)
-    except pygame.error, message:
-        print 'cannot load sound file:', name
+    except pygame.error as message:
+        print('cannot load sound file:', name)
         return NoneSound()
     return sound
 
@@ -1342,7 +1342,7 @@ def doRegisterColour (f):
     f, gf = readFract (f)
     f, bf = readFract (f)
     if debugging:
-        print rf, gf, bf
+        print(rf, gf, bf)
     r = toCol (rf)
     g = toCol (gf)
     b = toCol (bf)
@@ -1388,14 +1388,14 @@ def doDrawFillPolygon (f):
         f, xf = readFract (f)
         f, yf = readFract (f)
         if debugging:
-            print xf, yf,
+            print(xf, yf, end=' ')
         x = mults (resolution[0], xf)
         y = mults (resolution[1], yf)
         l += [[x, flip (y)]]
 
     f, c = readColour (f)
     if debugging:
-        print "drawFillPolygon (colour =", c, " l =", l, ")"
+        print("drawFillPolygon (colour =", c, " l =", l, ")")
     pygame.draw.polygon (screen, c, l, 0)
     return f
 
@@ -1426,7 +1426,7 @@ def doDrawFillCircle (f):
     f, c = readColour (f)
     debugf("circle  x = %d  y = %d,  r = %d\n", x, y, r)
     if debugging:
-        print "  colour =", c
+        print("  colour =", c)
     pygame.draw.circle (screen, c, (x, flip (y)), r, 0)
     return f
 
@@ -1479,14 +1479,14 @@ def doDrawPolygon (f):
         f, xf = readFract (f)
         f, yf = readFract (f)
         if debugging:
-            print xf, yf,
+            print(xf, yf, end=' ')
         x = mults (resolution[0], xf)
         y = mults (resolution[1], yf)
         l += [[x, flip(y)]]
 
     f, t = readFract (f)
     if debugging:
-        print "draw polygon", l, "thickness", t
+        print("draw polygon", l, "thickness", t)
     # pygame.draw.polygon (screen, c, l, 0)
     return f
 
--- a/src/gcc/gm2/examples/pge/pgeplayback.py
+++ b/src/gcc/gm2/examples/pge/pgeplayback.py
@@ -73,7 +73,7 @@ class myfile:
     def rewind_to (self, frameno):
         global seekTable
 
-        if seekTable.has_key (frameno):
+        if frameno in seekTable:
             self.pos = seekTable[frameno]
             return True
         else:
@@ -87,14 +87,14 @@ class myfile:
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 #
 #  error - issues an error message and exits.
 #
 
 def error (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
     sys.exit(1)
 
 
@@ -105,7 +105,7 @@ def error (format, *args):
 def debugf (format, *args):
     global debugging
     if debugging:
-        print str(format) % args,
+        print(str(format) % args, end=' ')
 
 
 #
@@ -129,8 +129,8 @@ def load_sound(name):
         return NoneSound ()
     try:
         sound = pygame.mixer.Sound (name)
-    except pygame.error, message:
-        print 'cannot load sound file:', name
+    except pygame.error as message:
+        print('cannot load sound file:', name)
         return NoneSound ()
     return sound
 
@@ -148,11 +148,11 @@ def doPlay (f):
     global sounds, wantedFrame, frameNo
 
     name = getSoundName (f)
-    print "need to play", name
-    if not sounds.has_key (name):
+    print("need to play", name)
+    if name not in sounds:
         sounds[name] = load_sound (name)
     if frameNo == wantedFrame:
-        print "playing", name
+        print("playing", name)
         sounds[name].play ()
     return f
 
@@ -201,7 +201,7 @@ def registerColour (f):
     f, gf = readFract (f)
     f, bf = readFract (f)
     if debugging:
-        print rf, gf, bf
+        print(rf, gf, bf)
     r = toCol (rf)
     g = toCol (gf)
     b = toCol (bf)
@@ -243,7 +243,7 @@ def drawFillCircle (f):
     if frameNo == wantedFrame:
         debugf("circle  x = %d  y = %d,  r = %d\n", x, y, r)
         if debugging:
-            print "  colour =", c
+            print("  colour =", c)
         pygame.draw.circle (screen, c, (x, flip (y)), r, 0)
     return f
 
@@ -258,19 +258,19 @@ def drawPolygon (f):
     f, n = readShort (f)
     l = []
     if debugging:
-        print "drawPolygon", n,
+        print("drawPolygon", n, end=' ')
     for i in range (n):
         f, xf = readFract (f)
         f, yf = readFract (f)
         if debugging:
-            print xf, yf,
+            print(xf, yf, end=' ')
         x = mults (resolution[0], xf)
         y = mults (resolution[1], yf)
         l += [[x, flip(y)]]
 
     f, t = readFract (f)
     if debugging:
-        print "draw polygon", l, "thickness", t
+        print("draw polygon", l, "thickness", t)
     if frameNo == wantedFrame:
         # pygame.draw.polygon(screen, c, l, 0)
         pass
@@ -344,12 +344,12 @@ def drawFillPolygon (f):
     f, n = readShort (f)
     l = []
     if debugging:
-        print "drawFillPolygon", n,
+        print("drawFillPolygon", n, end=' ')
     for i in range (n):
         f, xf = readFract (f)
         f, yf = readFract (f)
         if debugging:
-            print xf, yf,
+            print(xf, yf, end=' ')
         x = mults (resolution[0], xf)
         y = mults (resolution[1], yf)
         l += [[x, flip(y)]]
@@ -357,8 +357,8 @@ def drawFillPolygon (f):
     f, c = readColour (f)
     if frameNo == wantedFrame:
         if debugging:
-            print ""
-            print "drawFillPolygon (colour =", c, " l =", l, ")"
+            print("")
+            print("drawFillPolygon (colour =", c, " l =", l, ")")
         pygame.draw.polygon (screen, c, l, 0)
     return f
 
@@ -499,7 +499,7 @@ def readFile (name):
         header = header[:2]
         # print "readFile", header
         # printf ("(frameNo = %d, wantedFrame = %d)\n", frameNo, wantedFrame)
-        if call.has_key (header):
+        if header in call:
             f = call[header] (f)
             pc = f.pos
             header = struct.unpack ("3s", f.read (3))[0]
@@ -588,9 +588,9 @@ def doSystem (s):
     global verbose
 
     if verbose:
-        print s
+        print(s)
     if os.system (s) != 0:
-        print "shell failed:", s
+        print("shell failed:", s)
         sys.exit (1)
 
 
@@ -687,7 +687,7 @@ def finishMovie ():
     else:
         printf ("generating sound effect file\n")
         commandArgs = ""
-        print soxSound
+        print(soxSound)
         audio = "audio.wav"
         for t, s, n in soxSound:
             frameSound = "%6d-%3d.wav" % (t, n)
@@ -783,7 +783,7 @@ def grRegisterColour (f):
     f, gf = readFract (f)
     f, bf = readFract (f)
     if debugging:
-        print rf, gf, bf
+        print(rf, gf, bf)
     r = toCol (rf)
     g = toCol (gf)
     b = toCol (bf)
@@ -802,7 +802,7 @@ def doMessage (f):
     while int(b) != 0:
         text += b
         b = f.read (1)
-    print "Time:", frameTime, text
+    print("Time:", frameTime, text)
 
 
 def grMessage (f):
@@ -813,7 +813,7 @@ def grMessage (f):
     while int(b) != 0:
         text += b
         b = f.read (1)
-    print "Time:", frameTime, text
+    print("Time:", frameTime, text)
 
 
 def grDrawPolygon (f):
@@ -823,19 +823,19 @@ def grDrawPolygon (f):
     f, n = readShort (f)
     l = []
     if debugging:
-        print "grDrawPolygon", n,
+        print("grDrawPolygon", n, end=' ')
     for i in range (n):
         f, xf = readFract (f)
         f, yf = readFract (f)
         if debugging:
-            print xf, yf,
+            print(xf, yf, end=' ')
         x = mults (1.0, xf)
         y = mults (1.0, yf)
         l += [[x, flip(y)]]
 
     f, t = readFract (f)
     if debugging:
-        print "draw polygon", l, "thickness", t
+        print("draw polygon", l, "thickness", t)
     return f
 
 
@@ -847,12 +847,12 @@ def grDrawFillPolygon (f):
     f, n = readShort (f)
     l = []
     if debugging:
-        print "grDrawFillPolygon", n,
+        print("grDrawFillPolygon", n, end=' ')
     for i in range (n):
         f, xf = readFract (f)
         f, yf = readFract (f)
         if debugging:
-            print xf, yf,
+            print(xf, yf, end=' ')
         x = mults (1.0, xf)
         y = mults (1.0, yf)
         l += [[x, flip(y)]]
--- a/src/gcc/gm2/examples/pge/pgepygame.py
+++ b/src/gcc/gm2/examples/pge/pgepygame.py
@@ -33,14 +33,14 @@ maxColour         = 0
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 #
 #  error - issues an error message and exits.
 #
 
 def error (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
     sys.exit(1)
 
 
@@ -51,7 +51,7 @@ def error (format, *args):
 def debugf (format, *args):
     global debugging
     if debugging:
-        print str(format) % args,
+        print(str(format) % args, end=' ')
 
 
 #
@@ -96,7 +96,7 @@ def registerColour (connection):
     connection, bytes = get(connection, 3)
     r, g, b = struct.unpack('BBB', bytes)
     debugf("colour %d, %d, %d\n", r, g, b)
-    if not colTOid.has_key((r, g, b)):
+    if (r, g, b) not in colTOid:
         maxColour += 1
         colTOid[(r, g, b)] = maxColour
         idTOcol[maxColour] = (r, g, b)
@@ -200,7 +200,7 @@ def serveRPC ():
         data = connection.recv(1)
         debugf("received packet %c\n", data)
         if data:
-            if call.has_key(data):
+            if data in call:
                 connection = call[data](connection)
             else:
                 printf("error unexpected packet %c\n", data)
--- a/src/gcc/gm2/examples/pge/t.py
+++ b/src/gcc/gm2/examples/pge/t.py
@@ -24,6 +24,6 @@ pygame.draw.circle (screen, blue, (100, 100), 100, 0)
 pygame.display.flip()
 
 
-print "setting timer for 3 seconds"
+print("setting timer for 3 seconds")
 time.sleep (3)
-print "goodbye"
+print("goodbye")
--- a/src/gcc/gm2/examples/server/client.py
+++ b/src/gcc/gm2/examples/server/client.py
@@ -12,4 +12,4 @@ s.connect((serverHost, serverPort))
 while 1:
    s.send('h')
    data = s.recv(1024)
-   print data
+   print(data)
--- a/src/gcc/gm2/examples/swig/dual/testdual.py
+++ b/src/gcc/gm2/examples/swig/dual/testdual.py
@@ -1,5 +1,5 @@
 import libfirst
 
-print "inside Python"
+print("inside Python")
 libfirst.libfirst_out("calling out")
-print "finishing Python"
+print("finishing Python")
--- a/src/gcc/gm2/examples/swig/exceptions/stresstiny.py
+++ b/src/gcc/gm2/examples/swig/exceptions/stresstiny.py
@@ -7,8 +7,8 @@ import sys
 for i in range (10):
     try:
         libtiny.doSomething (i)
-        print "error exception should have been thrown"
+        print("error exception should have been thrown")
     except:
-        print "caught exception in Python:  i =", i
+        print(("caught exception in Python:  i =", i))
 
-print "stresstiny passed"
+print("stresstiny passed")
--- a/src/gcc/gm2/examples/swig/exceptions/testtiny.py
+++ b/src/gcc/gm2/examples/swig/exceptions/testtiny.py
@@ -5,6 +5,6 @@ import libtiny
 
 try:
     libtiny.doSomething(1)
-    print "error  : should not arrive here"
+    print("error  : should not arrive here")
 except:
-    print "success: caught exception in Python"
+    print("success: caught exception in Python")
--- a/src/gcc/gm2/examples/swig/full-strlib/testcopy.py
+++ b/src/gcc/gm2/examples/swig/full-strlib/testcopy.py
@@ -1,7 +1,7 @@
 import StrLib
 
 
-print StrLib.StrLib_StrLen("hello")
+print((StrLib.StrLib_StrLen("hello")))
 a = "1234567890"                       # should really find a better method
 StrLib.StrLib_StrCopy("hello", a)      # for creating, a, which is also
-print a                                # compatible with ARRAY OF CHAR
+print(a)                                # compatible with ARRAY OF CHAR
--- a/src/gcc/gm2/examples/swig/full-strlib/testequ.py
+++ b/src/gcc/gm2/examples/swig/full-strlib/testequ.py
@@ -22,23 +22,23 @@
 
 import StrLib
 
-print 'we are going to call StrLib.StrLib_StrLess("abcd", "pqr") and we expect 1 in return'
-print StrLib.StrLib_StrLess("abcd", "pqr")
+print('we are going to call StrLib.StrLib_StrLess("abcd", "pqr") and we expect 1 in return')
+print((StrLib.StrLib_StrLess("abcd", "pqr")))
 if StrLib.StrLib_StrLess("abcd", "pqr")==1:
-    print "passed"
+    print("passed")
 else:
-    print "failed"
+    print("failed")
 
-print 'we are going to call StrLib.StrLib_StrLess("pqr", "abcd") and we expect 0 in return'
-print StrLib.StrLib_StrLess("pqr", "abcd")
+print('we are going to call StrLib.StrLib_StrLess("pqr", "abcd") and we expect 0 in return')
+print((StrLib.StrLib_StrLess("pqr", "abcd")))
 if StrLib.StrLib_StrLess("pqr", "abcd")==0:
-    print "passed"
+    print("passed")
 else:
-    print "failed"
+    print("failed")
 
-print 'we are going to call StrLib.StrLib_IsSubString("abcdefghijk", "fghi") and we expect 1 in return'
-print StrLib.StrLib_IsSubString("abcdefghijk", "fghi")
+print('we are going to call StrLib.StrLib_IsSubString("abcdefghijk", "fghi") and we expect 1 in return')
+print((StrLib.StrLib_IsSubString("abcdefghijk", "fghi")))
 if StrLib.StrLib_IsSubString("abcdefghijk", "fghi")==1:
-    print "passed"
+    print("passed")
 else:
-    print "failed"
+    print("failed")
--- a/src/gcc/gm2/examples/swig/full-strlib/testlen.py
+++ b/src/gcc/gm2/examples/swig/full-strlib/testlen.py
@@ -1,4 +1,4 @@
 import StrLib
 
-print 'we are going to call StrLib.StrLib_StrLen("hello world") and we expect 11 in return'
-print StrLib.StrLib_StrLen("hello world")
+print('we are going to call StrLib.StrLib_StrLen("hello world") and we expect 11 in return')
+print((StrLib.StrLib_StrLen("hello world")))
--- a/src/gcc/gm2/examples/swig/full-strlib/testnum.py
+++ b/src/gcc/gm2/examples/swig/full-strlib/testnum.py
@@ -1,3 +1,3 @@
 import NumberIO
 
-print "1234 x 2 =", NumberIO.NumberIO_StrToInt("1234")*2
+print(("1234 x 2 =", NumberIO.NumberIO_StrToInt("1234")*2))
--- a/src/gcc/gm2/examples/swig/strlen/testlen.py
+++ b/src/gcc/gm2/examples/swig/strlen/testlen.py
@@ -1,4 +1,4 @@
 import MyStrLib
 
-print 'we are going to call MyStrLib.MyStrLib_StrLen("hello world") and we expect 11 in return'
-print MyStrLib.MyStrLib_StrLen("hello world")
+print('we are going to call MyStrLib.MyStrLib_StrLen("hello world") and we expect 11 in return')
+print((MyStrLib.MyStrLib_StrLen("hello world")))
--- a/src/gcc/gm2/examples/swig/strlib/testlen.py
+++ b/src/gcc/gm2/examples/swig/strlib/testlen.py
@@ -1,4 +1,4 @@
 import libStrLib
 
-print 'we are going to call libStrLib.libStrLib_StrLen("hello world") and we expect 11 in return'
-print libStrLib.libStrLib_StrLen("hello world")
+print('we are going to call libStrLib.libStrLib_StrLen("hello world") and we expect 11 in return')
+print((libStrLib.libStrLib_StrLen("hello world")))
--- a/src/gcc/gm2/examples/swig/tiny/testtiny.py
+++ b/src/gcc/gm2/examples/swig/tiny/testtiny.py
@@ -1,5 +1,5 @@
 import libtiny
 
-print "inside Python"
+print("inside Python")
 libtiny.libtiny_out("calling out")
-print "finishing Python"
+print("finishing Python")
--- a/src/gcc/gm2/tools-src/array2index.py
+++ b/src/gcc/gm2/tools-src/array2index.py
@@ -35,7 +35,7 @@ lines = []   # global copy of the input lines of text.
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 
 #
@@ -43,7 +43,7 @@ def printf (format, *args):
 #
 
 def fatal (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
     os.sys.exit(1)
 
 #
@@ -51,7 +51,7 @@ def fatal (format, *args):
 #
 
 def debug(s):
-    print "*", s, "*"
+    print("*", s, "*")
 
 #
 #  putNext - pushes, i, to be the next line read when
@@ -164,20 +164,20 @@ def setVarIndent (v, n):
 #
 
 def adjustVar (v, d):
-    print v, d
+    print(v, d)
     if d != {}:
         if v == []:
             h = ['VAR\n']
             t = []
-            if d.has_key('pCall'):
+            if 'pCall' in d:
                 v = h + ['   pCall: PtrToCallFrame ;\n'] + t
-            if d.has_key('pSym'):
+            if 'pSym' in d:
                 v = h + ['   pSym: PtrToSymbol ;\n'] + t
         else:
             h = v[0]
-            if d.has_key('pCall'):
+            if 'pCall' in d:
                 v = [h] + ['   pCall: PtrToCallFrame ;\n'] + v[1:]
-            if d.has_key('pSym'):
+            if 'pSym' in d:
                 v = [h] + ['   pSym: PtrToSymbol ;\n'] + v[1:]
         v = setVarIndent(v, getMaxIndent(v))
     return v
@@ -212,7 +212,7 @@ def scanStatements ():
             n = getIndent(i)
             y = i.find('[', x)+1
             z = i.find(']', y)
-            print "indexing ", i[y:z] 
+            print("indexing ", i[y:z]) 
             d['pSym'] = i[y:z]
             j = n * ' '
             j += 'pSym := GetPsym(%s) ;\n' % i[y:z]
@@ -224,7 +224,7 @@ def scanStatements ():
                 n = getIndent(i)
                 y = i.find('[', x)+1
                 z = i.find(']', y)
-                print "indexing ", i[y:z] 
+                print("indexing ", i[y:z]) 
                 d['pCall'] = i[y:z]
                 j = n * ' '
                 j += 'pCall := GetPcall(%s) ;\n' % i[y:z]
@@ -262,7 +262,7 @@ def scanProcedure ():
         if isVar(i):
             v = [i]
             v += scanVar()
-            print v
+            print(v)
         elif isBegin(i):
             s, d = scanStatements()
             v = adjustVar(v, d)
@@ -289,7 +289,7 @@ def scanLines (l):
     while not isEof(i):
         o += i
         if isProcedure(i):
-            print i
+            print(i)
             o += scanProcedure()
         i = getNext()
     return o
@@ -300,7 +300,7 @@ def scanLines (l):
 #
 
 def Usage():
-    print "array2index.py [-h][-o outputfile] inputfile"
+    print("array2index.py [-h][-o outputfile] inputfile")
 
 
 #
--- a/src/gcc/gm2/tools-src/def2texi.py
+++ b/src/gcc/gm2/tools-src/def2texi.py
@@ -59,12 +59,12 @@ def displayLibraryClass():
     l = libraryClassifications[i]
 
     while True:
-        print "@node " + l[1] + ", " + next + ", " + previous + ", " + up
-        print "@section " + l[1]
-        print ""
+        print(("@node " + l[1] + ", " + next + ", " + previous + ", " + up))
+        print(("@section " + l[1]))
+        print("")
         displayModules(l[1], l[0], buildDir, sourceDir)
-        print ""
-        print "@c ---------------------------------------------------------------------"
+        print("")
+        print("@c ---------------------------------------------------------------------")
         previous = l[1]
         i += 1
         if i == len(libraryClassifications):
@@ -80,14 +80,14 @@ def displayLibraryClass():
 #
 
 def displayMenu():
-    print "@menu"
+    print("@menu")
     for l in libraryClassifications:
-        print "* " + l[1] + "::" + l[2]
-    print "@end menu"
+        print(("* " + l[1] + "::" + l[2]))
+    print("@end menu")
 
-    print "\n"
-    print "@c ====================================================================="
-    print "\n"
+    print("\n")
+    print("@c =====================================================================")
+    print("\n")
 
 
 #
@@ -124,10 +124,10 @@ def removeFields (file, line):
         elif (string.find(line, "SYSTEM") != -1) and (string.find(line, ":") != -1) and (string.find(line, "Description:") == -1):
             line = file.readline()
         else:
-	    print string.replace(string.replace(string.rstrip(line),
-                                            "{", "@{"), "}", "@}")
+	    print((string.replace(string.replace(string.rstrip(line),
+                                            "{", "@{"), "}", "@}")))
             line = file.readline()
-    print string.rstrip(line)
+    print((string.rstrip(line)))
 
 
 #
@@ -173,24 +173,24 @@ def checkIndex (line):
             word = string.lstrip(word)
             if word != "":
                 if string.find(word, ':') == -1:
-                    print "@findex " + word + " (var)"
+                    print(("@findex " + word + " (var)"))
                 elif len(word)>0:
                     var = string.split(word, ':')
                     if len(var)>0:
-                        print "@findex " + var[0] + " (var)"
+                        print(("@findex " + var[0] + " (var)"))
 
     if inType:
         words = string.lstrip(line)
         if string.find(words, '=') != -1:
             word = string.split(words, "=")
             if (len(word[0])>0) and (word[0][0] != '_'):
-                print "@findex " + string.rstrip(word[0]) + " (type)"
+                print(("@findex " + string.rstrip(word[0]) + " (type)"))
         else:
             word = string.split(words)
             if (len(word)>1) and (word[1] == ';'):
                 # hidden type
                 if (len(word[0])>0) and (word[0][0] != '_'):
-                    print "@findex " + string.rstrip(word[0]) + " (type)"
+                    print(("@findex " + string.rstrip(word[0]) + " (type)"))
 
     if inConst:
         words = string.split(line, ';')
@@ -200,7 +200,7 @@ def checkIndex (line):
                 if string.find(word, '=') != -1:
                     var = string.split(word, '=')
                     if len(var)>0:
-                        print "@findex " + var[0] + " (const)"
+                        print(("@findex " + var[0] + " (const)"))
 
     if procedure != "":
         name = string.split(procedure, "(")
@@ -209,7 +209,7 @@ def checkIndex (line):
             if proc[-1] == ";":
                 proc = proc[:-1]
             if proc != "":
-                print "@findex " + proc
+                print(("@findex " + proc))
 
 
 #
@@ -217,7 +217,7 @@ def checkIndex (line):
 #
 
 def parseDefinition (dir, source, build, file, needPage):
-    print ""
+    print("")
     f = open(findFile(dir, build, source, file), 'r')
     initState()
     line = f.readline()
@@ -228,29 +228,29 @@ def parseDefinition (dir, source, build, file, needPage):
     while (string.find(line, "DEFINITION") == -1):
         line = f.readline()
 
-    print "@example"
-    print string.rstrip(line)
+    print("@example")
+    print((string.rstrip(line)))
     line = f.readline()
     if len(string.rstrip(line)) == 0:
-        print string.replace(string.replace(string.rstrip(line),
-                                            "{", "@{"), "}", "@}")
+        print((string.replace(string.replace(string.rstrip(line),
+                                            "{", "@{"), "}", "@}")))
         line = f.readline()
         if (string.find(line, "(*") != -1):
             removeFields(f, line)
         else:
-            print string.rstrip(line)
+            print((string.rstrip(line)))
     else:
-        print string.rstrip(line)
+        print((string.rstrip(line)))
 
     line = f.readline()
     while line:
 	line = string.rstrip(line)
 	checkIndex(line)
-        print string.replace(string.replace(line, "{", "@{"), "}", "@}")
+        print((string.replace(string.replace(line, "{", "@{"), "}", "@}")))
         line = f.readline()
-    print "@end example"
+    print("@end example")
     if needPage:
-        print "@page"
+        print("@page")
     f.close()
 
 def parseModules (up, dir, build, source, listOfModules):
@@ -262,10 +262,10 @@ def parseModules (up, dir, build, source, listOfModules):
         next = ""
 
     while i<len(listOfModules):
-       print "@node " + dir + "/" + listOfModules[i][:-4] + ", " + next + ", " + previous + ", " + up
-       print "@subsection " + dir + "/" + listOfModules[i][:-4]
+       print(("@node " + dir + "/" + listOfModules[i][:-4] + ", " + next + ", " + previous + ", " + up))
+       print(("@subsection " + dir + "/" + listOfModules[i][:-4]))
        parseDefinition(dir, source, build, listOfModules[i], True)
-       print "\n"
+       print("\n")
        previous = dir + "/" + listOfModules[i][:-4]
        i = i + 1
        if i+1<len(listOfModules):
@@ -282,7 +282,7 @@ def doCat (name):
     file = open(name, 'r')
     line = file.readline()
     while line:
-        print string.rstrip(line)
+        print((string.rstrip(line)))
         line = file.readline()
     file.close()
 
@@ -293,20 +293,20 @@ def doCat (name):
 #
 
 def moduleMenu (dir, build, source):
-    print "@menu"
+    print("@menu")
     listOfFiles = []
     if os.path.exists(os.path.join(source, dir)):
         listOfFiles += os.listdir(os.path.join(source, dir))
     if os.path.exists(os.path.join(source, dir)):
         listOfFiles += os.listdir(os.path.join(build, dir))
-    listOfFiles = dict.fromkeys(listOfFiles).keys()
+    listOfFiles = list(dict.fromkeys(listOfFiles).keys())
     listOfFiles.sort()
     for file in listOfFiles:
         if foundFile(dir, build, source, file):
             if (len(file)>4) and (file[-4:] == '.def'):
-                print "* " + dir + "/" + file[:-4] + "::" + file
-    print "@end menu"
-    print "\n"
+                print(("* " + dir + "/" + file[:-4] + "::" + file))
+    print("@end menu")
+    print("\n")
 
 
 #
@@ -347,7 +347,7 @@ def findFile (dir, build, source, file):
     name2 = os.path.join(os.path.join(source, dir), file)
     if os.path.exists(name2):
         return name2
-    print "file cannot be found in either " + name1 + " or " + name2
+    print(("file cannot be found in either " + name1 + " or " + name2))
     os.sys.exit(1)
 
 
@@ -367,7 +367,7 @@ def displayModules(up, dir, build, source):
             listOfFiles += os.listdir(os.path.join(source, dir))
         if os.path.exists(os.path.join(source, dir)):
             listOfFiles += os.listdir(os.path.join(build, dir))
-        listOfFiles = dict.fromkeys(listOfFiles).keys()
+        listOfFiles = list(dict.fromkeys(listOfFiles).keys())
         listOfFiles.sort()
         listOfModules = []
         for file in listOfFiles:
@@ -377,20 +377,20 @@ def displayModules(up, dir, build, source):
         listOfModules.sort()
         parseModules(up, dir, build, source, listOfModules)
     else:
-        print "directory " + dir + " not found in either " + build + " or " + source
+        print(("directory " + dir + " not found in either " + build + " or " + source))
 
 
 def displayCopyright ():
-    print "@c Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008"
-    print "@c Free Software Foundation, Inc."
-    print """
+    print("@c Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008")
+    print("@c Free Software Foundation, Inc.")
+    print("""
 @c Permission is granted to copy, distribute and/or modify this document
 @c under the terms of the GNU Free Documentation License, Version 1.2 or
 @c any later version published by the Free Software Foundation.
-"""
+""")
 
 def Usage():
-    print "def2texi.py [-h][-bbuilddir][-uupnode][-ffilename]"
+    print("def2texi.py [-h][-bbuilddir][-uupnode][-ffilename]")
     
 def collectArgs():
     buildDir="."
--- a/src/gcc/gm2/tools-src/gensum.py
+++ b/src/gcc/gm2/tools-src/gensum.py
@@ -59,9 +59,9 @@ class testcase:
 def usage (code):
     global noColumns
 
-    print "gensum [-h] [-c number] filename.sum {filename.sum}"
-    print "  -c number of columns per architectural table (default", noColumns, ")"
-    print "  -h help"
+    print("gensum [-h] [-c number] filename.sum {filename.sum}")
+    print("  -c number of columns per architectural table (default", noColumns, ")")
+    print("  -h help")
     sys.exit (code)
 
 
@@ -104,18 +104,18 @@ def scanner (name, function):
 def addPassResult (name, varient):
     global regressionTests, configuration, passStats
 
-    if not regressionTests.has_key (configuration):
+    if configuration not in regressionTests:
         regressionTests[configuration] = {}
 
     arch = regressionTests[configuration]
-    if arch.has_key (name):
+    if name in arch:
         t = arch[name]
     else:
         t = testcase (name)
     t.addPass (varient)
     arch[name] = t
     regressionTests[configuration] = arch
-    if passStats.has_key (configuration):
+    if configuration in passStats:
         passStats[configuration] += 1
     else:
         passStats[configuration] = 1
@@ -128,18 +128,18 @@ def addPassResult (name, varient):
 def addFailResult (name, varient):
     global regressionTests, configuration, failStats
 
-    if not regressionTests.has_key (configuration):
+    if configuration not in regressionTests:
         regressionTests[configuration] = {}
 
     arch = regressionTests[configuration]
-    if arch.has_key (name):
+    if name in arch:
         t = arch[name]
     else:
         t = testcase (name)
     t.addFail (varient)
     arch[name] = t
     regressionTests[configuration] = arch
-    if failStats.has_key (configuration):
+    if configuration in failStats:
         failStats[configuration] += 1
     else:
         failStats[configuration] = 1
@@ -153,18 +153,18 @@ def addFailResult (name, varient):
 def addUnresolvedResult (name, varient, reason):
     global regressionTests, configuration, unresolvedStats
 
-    if not regressionTests.has_key (configuration):
+    if configuration not in regressionTests:
         regressionTests[configuration] = {}
 
     arch = regressionTests[configuration]
-    if arch.has_key (name):
+    if name in arch:
         t = arch[name]
     else:
         t = testcase (name)
     t.addUnresolved (varient, reason)
     arch[name] = t
     regressionTests[configuration] = arch
-    if unresolvedStats.has_key (configuration):
+    if configuration in unresolvedStats:
         unresolvedStats[configuration] += 1
     else:
         unresolvedStats[configuration] = 1
@@ -239,20 +239,20 @@ def processLine(line):
 #
 
 def printRow (testcase, arch, option):
-    if regressionTests[arch].has_key (testcase):
+    if testcase in regressionTests[arch]:
         t = regressionTests[arch][testcase]
         if option in t.getPasses ():
-            print '<td bgcolor="green">', string.join (option, ' '), '</td>',
+            print('<td bgcolor="green">', string.join (option, ' '), '</td>', end=' ')
         elif option in t.getFails():
-            print '<td bgcolor="red">', string.join (option, ' '), '</td>',
+            print('<td bgcolor="red">', string.join (option, ' '), '</td>', end=' ')
         elif option in t.getUnresolved():
-            print '<td bgcolor="yellow">', string.join (option, ' '), '</td>',
+            print('<td bgcolor="yellow">', string.join (option, ' '), '</td>', end=' ')
         elif option == []:
-            print '<td></td>',
+            print('<td></td>', end=' ')
         else:
-            print '<td></td>',
+            print('<td></td>', end=' ')
     else:
-        print '<td></td>',
+        print('<td></td>', end=' ')
 
 
 #
@@ -263,9 +263,9 @@ def getListOfTests ():
     global regressionTests
 
     list = []
-    for arch in regressionTests.keys ():
+    for arch in list(regressionTests.keys ()):
         t = regressionTests[arch]
-        for u in t.keys ():
+        for u in list(t.keys ()):
             if not (u in list):
                 list += [u]
     return list
@@ -281,9 +281,9 @@ def getListOfOptions (testcase):
 
     optlist = []
     total = 0
-    for arch in regressionTests.keys ():
+    for arch in list(regressionTests.keys ()):
         t = regressionTests[arch]
-        if t.has_key (testcase):
+        if testcase in t:
             u = t[testcase]
             for p in u.getPasses () + u.getFails () + u.getUnresolved ():
                 if not (p in optlist):
@@ -314,87 +314,87 @@ def printResults():
     global target, configuration, author, date, regressionTests, noColumns
     global passStats, failStats, unresolvedStats
 
-    print "<html><head><title>"
-    print "GNU Modula-2 regression tests"
-    print "</title></head>"
-    print ""
-    print "<h1>",
-    print "GNU Modula-2 regression tests",
-    print "</h1>"
-    print ""
-
-    print '<p><table border="1"><tr>'
-    print '<th colspan="2">Key</th>'
-    print '<tr><td>Colour</td><td>Meaning</td></tr>'
-    print '<tr><td bgcolor="green"></td><td>Pass</td></tr>'
-    print '<tr><td bgcolor="red"></td><td>Fail</td></tr>'
-    print '<tr><td bgcolor="yellow"></td><td>Unresolved due to a prior error</td></tr>'
-    print '<tr><td bgcolor="blue"></td><td>Not tested</td></tr>'
-    print '<tr><td></td><td>Entire testcase not tested on this platform</td></tr>'
-    print '</table></p>'
-    print ''
-
-    archList = regressionTests.keys ()
-    print "<h2>",
-    print "Summary",
-    print "</h2>"
-    print '<p><table border="1">'
-    print '<tr>',
-    print '<th colspan="1">Status</th>',
+    print("<html><head><title>")
+    print("GNU Modula-2 regression tests")
+    print("</title></head>")
+    print("")
+    print("<h1>", end=' ')
+    print("GNU Modula-2 regression tests", end=' ')
+    print("</h1>")
+    print("")
+
+    print('<p><table border="1"><tr>')
+    print('<th colspan="2">Key</th>')
+    print('<tr><td>Colour</td><td>Meaning</td></tr>')
+    print('<tr><td bgcolor="green"></td><td>Pass</td></tr>')
+    print('<tr><td bgcolor="red"></td><td>Fail</td></tr>')
+    print('<tr><td bgcolor="yellow"></td><td>Unresolved due to a prior error</td></tr>')
+    print('<tr><td bgcolor="blue"></td><td>Not tested</td></tr>')
+    print('<tr><td></td><td>Entire testcase not tested on this platform</td></tr>')
+    print('</table></p>')
+    print('')
+
+    archList = list(regressionTests.keys ())
+    print("<h2>", end=' ')
+    print("Summary", end=' ')
+    print("</h2>")
+    print('<p><table border="1">')
+    print('<tr>', end=' ')
+    print('<th colspan="1">Status</th>', end=' ')
     for arch in archList:
-        print '<th colspan="1">', arch, '</th>',
-    print '</tr>'
-    print '<tr><td bgcolor="green"></td>',
+        print('<th colspan="1">', arch, '</th>', end=' ')
+    print('</tr>')
+    print('<tr><td bgcolor="green"></td>', end=' ')
     for arch in archList:
-        if passStats.has_key (arch):
-            print '<td bgcolor="green">', passStats[arch], "</td>"
+        if arch in passStats:
+            print('<td bgcolor="green">', passStats[arch], "</td>")
         else:
-            print '<td bgcolor="green">none</td>'
-    print '</tr>'
-    print '<tr><td bgcolor="red"></td>',
+            print('<td bgcolor="green">none</td>')
+    print('</tr>')
+    print('<tr><td bgcolor="red"></td>', end=' ')
     for arch in archList:
-        if failStats.has_key (arch):
-            print '<td bgcolor="red">', failStats[arch], "</td>"
+        if arch in failStats:
+            print('<td bgcolor="red">', failStats[arch], "</td>")
         else:
-            print '<td bgcolor="red">none</td>'
-    print '</tr>'
-    print '<tr><td bgcolor="yellow"></td>',
+            print('<td bgcolor="red">none</td>')
+    print('</tr>')
+    print('<tr><td bgcolor="yellow"></td>', end=' ')
     for arch in archList:
-        if unresolvedStats.has_key (arch):
-            print '<td bgcolor="yellow">', unresolvedStats[arch], "</td>"
+        if arch in unresolvedStats:
+            print('<td bgcolor="yellow">', unresolvedStats[arch], "</td>")
         else:
-            print '<td bgcolor="yellow">none</td>'
-    print '</tr>'
-    print '</table></p>'
+            print('<td bgcolor="yellow">none</td>')
+    print('</tr>')
+    print('</table></p>')
 
-    print "<h1>",
-    print "GNU Modula-2 regression test results",
-    print "</h1>"
+    print("<h1>", end=' ')
+    print("GNU Modula-2 regression test results", end=' ')
+    print("</h1>")
 
     testlist = getListOfTests ()
     for testcase in testlist:
         total, optlist = getListOfOptions (testcase)
         if total > 0:
-            print '<p><table border="1"><tr>'
-            print '<th colspan="', len (archList) * noColumns, '">',
+            print('<p><table border="1"><tr>')
+            print('<th colspan="', len (archList) * noColumns, '">', end=' ')
             heading = getHeading (testcase)
-            print heading, '</th></tr>'
+            print(heading, '</th></tr>')
             for arch in archList:
-                print '<th colspan="', noColumns, '">', arch, '</th>',
+                print('<th colspan="', noColumns, '">', arch, '</th>', end=' ')
 
             if total % noColumns != 0:
                 total = ((total / noColumns) +1) * noColumns
             for count in range (0, total, noColumns):
-                print '<tr>',
+                print('<tr>', end=' ')
                 for arch in archList:
                     for c in range (count, count+noColumns):
                         if c < len (optlist):
                             printRow (testcase, arch, optlist[c])
                         else:
                             printRow (testcase, arch, [])
-                print '</tr>'
-            print '</table></p>'
-    print '</html>'
+                print('</tr>')
+            print('</table></p>')
+    print('</html>')
 
 
 target = ""
--- a/src/gcc/gm2/tools-src/tidydates.py
+++ b/src/gcc/gm2/tools-src/tidydates.py
@@ -104,7 +104,7 @@ def handleCopyright (outfile, lines, n, leader1, leader2):
 #
 
 def handleHeader (file, leader1, leader2):
-    print "------------------------------"
+    print("------------------------------")
     l = open(file, 'r').readlines()
     if len(l)>20:
         outfile = open('tmptidy', 'w')
@@ -114,7 +114,7 @@ def handleHeader (file, leader1, leader2):
                 outfile, n = handleCopyright(outfile, l, n, leader1, leader2)
                 outfile.writelines(l[n:])
                 outfile.close()
-                print "-> mv tmptidy", file
+                print(("-> mv tmptidy", file))
                 command = "mv tmptidy %s" % file
                 os.system(command)
                 return
--- a/src/gcc/gm2/www/tools/texi2tr/src/navigation.py
+++ b/src/gcc/gm2/www/tools/texi2tr/src/navigation.py
@@ -74,15 +74,15 @@ class nodeInfo:
       <table width="100%" cellpadding="2" cellspacing="2">
 	<tr valign="middle">
 """)
-        if (self.prev != "") and (self.prev != "Top") and anchors.has_key(self.prev):
+        if (self.prev != "") and (self.prev != "Top") and self.prev in anchors:
             html.raw('''
 	  <td><a accesskey="p" href="''')
             html.raw(anchors[self.prev])
             html.raw('"><img width="48" alt="Prev" src="prev.png" border="0" height="48"></img></a></td>')
-        if (self.next != "") and (self.next != "Top") and anchors.has_key(self.next):
+        if (self.__next__ != "") and (self.__next__ != "Top") and self.__next__ in anchors:
             html.raw('''
 	  <td align="right"><a accesskey="n" href="''')
-            html.raw(anchors[self.next])
+            html.raw(anchors[self.__next__])
             html.raw('"><img width="48" alt="Next" src="next.png" border="0" height="48"></img></a></td>')
         html.raw('</tr></table></div>')
 
@@ -137,7 +137,7 @@ class menuInfo:
     #
     def debugMenu (self):
         for m in self.list:
-            print m[0], m[1]
+            print((m[0], m[1]))
     #
     #  generateMenu - issues the menu
     #
@@ -175,15 +175,15 @@ class menuInfo:
         html.raw('<div id="tabmenu">\n')
         html.raw('<ul id="tab">\n')
         for m in self.list:
-            if anchors.has_key(m[0]):
+            if m[0] in anchors:
                 active = litab(html, anchors[m[0]], m[0], active)
             else:
-                if (len(m[1]) > 1) and (m[1][-1] == '.') and (anchors.has_key(m[1][:-1])):
+                if (len(m[1]) > 1) and (m[1][-1] == '.') and (m[1][:-1] in anchors):
                     active = litab(html, anchors[m[1][:-1]], m[0], active)
-                elif anchors.has_key(m[1]):
+                elif m[1] in anchors:
                     active = litab(html, anchors[m[1]], m[0], active)
                 else:
-                    print "cannot find anchor for section", m[0], "or", m[1]
+                    print(("cannot find anchor for section", m[0], "or", m[1]))
         html.raw('\n</ul>\n')
         html.raw('</div>\n')
     #
@@ -192,15 +192,15 @@ class menuInfo:
     def _genLong (self, html):
         html.raw('\n<ul>\n')
         for m in self.list:
-            if anchors.has_key(m[0]):
+            if m[0] in anchors:
                 liurl(html, anchors[m[0]], m[1])
             else:
-                if (len(m[1]) > 1) and (m[1][-1] == '.') and (anchors.has_key(m[1][:-1])):
+                if (len(m[1]) > 1) and (m[1][-1] == '.') and (m[1][:-1] in anchors):
                     liurl(html, anchors[m[1][:-1]], m[1])
-                elif anchors.has_key(m[1]):
+                elif m[1] in anchors:
                     liurl(html, anchors[m[1]], m[1])
                 else:
-                    print "cannot find anchor for section", m[0], "or", m[1]
+                    print(("cannot find anchor for section", m[0], "or", m[1]))
         html.raw('</ul>\n')
 
 #
@@ -210,8 +210,8 @@ class menuInfo:
 def anchor (html, label):
     global anchors
 
-    if anchors.has_key(label):
-        print "node", label, "already exists"
+    if label in anchors:
+        print(("node", label, "already exists"))
     anchors[label] = html.getNodeLink()
     s = '<a name="' + html.getNodeAnchor() + '"></a>\n'
     html.raw(s)
--- a/src/gcc/gm2/www/tools/texi2tr/src/outputdev.py
+++ b/src/gcc/gm2/www/tools/texi2tr/src/outputdev.py
@@ -26,10 +26,10 @@ import config
 
 
 # html tag
-null_tag, title_tag, header1_tag, header2_tag, header3_tag, header4_tag, center_tag, paragraph_tag, preformatted_tag, teletype_tag, italic_tag, bold_tag, no_tag = range(13)
+null_tag, title_tag, header1_tag, header2_tag, header3_tag, header4_tag, center_tag, paragraph_tag, preformatted_tag, teletype_tag, italic_tag, bold_tag, no_tag = list(range(13))
 
 # html state machine
-init_state, known_state, end_state, copy_state, white_state, nf_state = range(6)
+init_state, known_state, end_state, copy_state, white_state, nf_state = list(range(6))
 
 # char2code contains all html character codes
 char2code = {}
@@ -166,7 +166,7 @@ class htmlDevice:
     #
     def _encodeChar (self, c):
         global char2code
-        if char2code.has_key(c):
+        if c in char2code:
             self.raw(char2code[c])
         else:
             self.raw(c)
@@ -200,11 +200,11 @@ class htmlDevice:
         if config.multipleFragments:
             self.output = open(name, 'w')
         if config.debugFragments:
-            print
-            print "----------------------------------------------"
-            print name
-            print "----------------------------------------------"
-            print
+            print()
+            print("----------------------------------------------")
+            print(name)
+            print("----------------------------------------------")
+            print()
             self.output = sys.stdout
         self.fragNo += 1
         self.deviceHeader()
@@ -526,10 +526,10 @@ class htmlDevice:
                 f = os.path.join(i, filename)
                 if os.path.exists(f) and os.path.isfile(f):
                     return open(f, 'r').read()
-            print "cannot open", description
+            print(("cannot open", description))
             sys.exit(0)
         except:
-            print "cannot open", description
+            print(("cannot open", description))
             sys.exit(0)
     #
     #  emitMenuTitle -
--- a/src/gcc/gm2/www/tools/texi2tr/src/texi2tr.py
+++ b/src/gcc/gm2/www/tools/texi2tr/src/texi2tr.py
@@ -54,7 +54,7 @@ indexSections = {}
 html = None
 
 # output state
-ignore, passthrough, arguments, menu = range(4)
+ignore, passthrough, arguments, menu = list(range(4))
 
 currentMenu = navigation.menuInfo(True)
 
@@ -65,7 +65,7 @@ currentMenu = navigation.menuInfo(True)
 #
 
 def printf (format, *args):
-    print str(format) % args,
+    print(str(format) % args, end=' ')
 
 
 #
@@ -75,7 +75,7 @@ def printf (format, *args):
 def debugf (format, *args):
     global debugging
     if debugging:
-        print str(format) % args,
+        print(str(format) % args, end=' ')
 
 
 #
@@ -85,7 +85,7 @@ def debugf (format, *args):
 def verbosef (format, *args):
     global verbose
     if verbose:
-        print str(format) % args,
+        print(str(format) % args, end=' ')
 
 
 #
@@ -93,10 +93,10 @@ def verbosef (format, *args):
 #
 
 def Usage ():
-    print "texi2tr [-h] [-v] [-Iincludepath] [-Ttemplatepath] [-r rootname.html] [-b basename-%d.html] filename.texi"
-    print "  produces html from the texinfo filename.texi"
-    print "  -h help"
-    print "  -v verbose"
+    print("texi2tr [-h] [-v] [-Iincludepath] [-Ttemplatepath] [-r rootname.html] [-b basename-%d.html] filename.texi")
+    print("  produces html from the texinfo filename.texi")
+    print("  -h help")
+    print("  -v verbose")
     sys.exit(0)
 
 
@@ -206,7 +206,7 @@ def pushArg (init):
     global argStack, debugging
     argStack = [init] + argStack
     if debugging:
-        print "pushArg:  argStack", argStack
+        print("pushArg:  argStack", argStack)
 
 
 #
@@ -222,7 +222,7 @@ def popArg ():
     else:
         argStack = []
     if debugging:
-        print "popArg:  argStack", argStack
+        print("popArg:  argStack", argStack)
     return value
 
 
@@ -279,7 +279,7 @@ def parseArgs (contents, i, delim):
 def call (command, args, state):
     global functions
 
-    if functions.has_key(command):
+    if command in functions:
         return functions[command](args, state)
     else:
         error("unknown command '" + command + "'")
@@ -428,7 +428,7 @@ def doSet (content, state):
 
 def doValue (content, state):
     global values
-    if values.has_key(content):
+    if content in values:
         return values[content], state
     else:
         error('unknown value ' + content)
@@ -548,7 +548,7 @@ def doIgnore (content, state):
 
 def pushState (keyword, state):
     global statementStack
-    if statementStack.has_key(keyword):
+    if keyword in statementStack:
         statementStack[keyword] = [state] + statementStack[keyword]
     else:
         statementStack[keyword] = [state]
@@ -568,11 +568,11 @@ def doConsume (content, state, keyword):
 def doEnd (content, state):
     global statementStack, endFunctions
     keyword = content.split()[0]
-    if statementStack.has_key(keyword):
+    if keyword in statementStack:
         if len(statementStack[keyword]) == 0:
             error("unexpected end '" + keyword + "'")
         else:
-            if endFunctions.has_key(keyword):
+            if keyword in endFunctions:
                 endFunctions[keyword](state)
             state = popState(keyword)
     else:
@@ -666,7 +666,7 @@ def doChapter (content, state):
 
 def addSectionAnchor (content):
     global html, indexSections
-    if indexSections.has_key(content):
+    if content in indexSections:
         error('section name "' + content + '" already exists')
     else:
         indexSections[content] = html.sectionAnchor(content)
@@ -986,7 +986,7 @@ def doFindex (content, state):
 
     if state == ignore:
         return skipLine (content, state)
-    if indexFunc.has_key(content):
+    if content in indexFunc:
         indexFunc[content] += [html.getLink()]
     else:
         indexFunc[content] = [html.getLink()]
@@ -1028,7 +1028,7 @@ def generateFunctionIndex (html):
 
     html.openDiv().flushDiv()
     html.paraBegin()
-    for k,v in sorted([(key, value) for (key,value) in indexFunc.items()]):
+    for k,v in sorted([(key, value) for (key,value) in list(indexFunc.items())]):
         html.write(k)
         html.write(': ')
         for n in range(len(v)):
@@ -1051,7 +1051,7 @@ def generateSectionIndex (html):
     html.paraBegin()
     html.write('Alphabetically sorted list of contents')
     html.raw('<br>\n')
-    for k,v in sorted([(key, value) for (key,value) in indexSections.items()]):
+    for k,v in sorted([(key, value) for (key,value) in list(indexSections.items())]):
         html.raw('<a href="')
         html.raw(v)
         html.raw('">')
