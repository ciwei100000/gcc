# DP: Revert the fix for PR c++/86610, causing PR c++/88995.

gcc/cp/

2019-01-17  Nathan Sidwell  <nathan@acm.org>

	PR c++/86610
	* semantics.c (process_outer_var_ref): Only skip dependent types
	in templates.

gcc/testsuite/

2019-01-17  Nathan Sidwell  <nathan@acm.org>

	PR c++/86610
	* g++.dg/cpp0x/pr86610.C: New.

 
--- a/src/gcc/cp/semantics.c
+++ b/src/gcc/cp/semantics.c
@@ -3415,9 +3415,10 @@
     }
 
   /* In a lambda within a template, wait until instantiation
-     time to implicitly capture a dependent type.  */
+     time to implicitly capture.  */
   if (context == containing_function
-      && dependent_type_p (TREE_TYPE (decl)))
+      && DECL_TEMPLATE_INFO (containing_function)
+      && uses_template_parms (DECL_TI_ARGS (containing_function)))
     return decl;
 
   if (lambda_expr && VAR_P (decl)
--- a/src/gcc/testsuite/g++.dg/cpp0x/pr86610.C
+++ b/src/gcc/testsuite/g++.dg/cpp0x/pr86610.C
@@ -1,31 +0,0 @@
-// { dg-do run { target c++11 } }
-// PR c++86610 lambda capture inside template
-
-struct C
-{
-  int operator[](int)
-  { return 1; }
-
-  int operator[](int) const
-  { return 0; } // Want this one
-};
-
-int q()
-{
-  C c;
-  return [=] { return c[0]; }();
-}
-
-template <typename T>
-int f()
-{
-  C c;
-  T d;
-  return [=] { return c[0]; }() 
-    + [=] { return c[0] + d[0]; }();
-}
-
-int main()
-{
-  return q () + f<C>();
-}
