# DP: Proposed fix for PR go/98496

--- a/src/libgo/misc/cgo/test/cthread_unix.c	2020-10-20 15:26:29.000000000 +0200
+++ b/src/libgo/misc/cgo/test/cthread_unix.c	2021-01-08 17:14:35.000000000 +0100
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris
+// +build aix darwin dragonfly freebsd hurd linux netbsd openbsd solaris
 
 #include <pthread.h>
 #include "_cgo_export.h"
--- a/src/libgo/go/crypto/x509/root_hurd.go	2020-10-20 15:26:29.000000000 +0200
+++ b/src/libgo/go/crypto/x509/root_hurd.go	2021-01-02 18:47:27.000000000 +0100
@@ -9,3 +9,9 @@
 var certFiles = []string{
 	"/etc/ssl/certs/ca-certificates.crt", // Debian/Ubuntu/Gentoo etc.
 }
+
+// Possible directories with certificate files; stop after successfully
+// reading at least one file from a directory.
+var certDirectories = []string{
+	"/etc/ssl/certs",               // SLES10/SLES11, https://golang.org/issue/12139
+}
--- a/src/libgo/go/runtime/export_pipe2_test.go	2020-12-31 09:53:24.000000000 +0100
+++ b/src/libgo/go/runtime/export_pipe2_test.go	2021-01-04 01:35:30.000000000 +0100
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build freebsd linux netbsd openbsd solaris
+// +build freebsd hurd linux netbsd openbsd solaris
 
 package runtime
 
--- a/src/libgo/go/runtime/nbpipe_test.go	2020-10-20 15:26:29.000000000 +0200
+++ b/src/libgo/go/runtime/nbpipe_test.go	2021-01-04 11:51:18.000000000 +0100
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris
+// +build aix darwin dragonfly freebsd hurd linux netbsd openbsd solaris
 
 package runtime_test
 
--- a/src/libgo/go/runtime/os_hurd.go	2021-01-09 11:06:49.000000000 +0100
+++ b/src/libgo/go/runtime/os_hurd.go	2021-01-09 11:07:35.000000000 +0100
@@ -27,19 +27,19 @@
 
 //go:noescape
 //extern sem_init
-func sem_init(sem *_sem_t, pshared int32, value uint32) int32
+func sem_init(sem *semt, pshared int32, value uint32) int32
 
 //go:noescape
 //extern sem_wait
-func sem_wait(sem *_sem_t) int32
+func sem_wait(sem *semt) int32
 
 //go:noescape
 //extern sem_post
-func sem_post(sem *_sem_t) int32
+func sem_post(sem *semt) int32
 
 //go:noescape
 //extern sem_timedwait
-func sem_timedwait(sem *_sem_t, timeout *timespec) int32
+func sem_timedwait(sem *semt, timeout *timespec) int32
 
 //go:noescape
 //extern clock_gettime
@@ -51,12 +51,12 @@
 		return
 	}
 
-	var sem *_sem_t
+	var sem *semt
 
 	// Call libc's malloc rather than malloc. This will
 	// allocate space on the C heap. We can't call malloc
 	// here because it could cause a deadlock.
-	sem = (*_sem_t)(libc_malloc(unsafe.Sizeof(*sem)))
+	sem = (*semt)(libc_malloc(unsafe.Sizeof(*sem)))
 	if sem_init(sem, 0, 0) != 0 {
 		throw("sem_init")
 	}
@@ -86,7 +86,7 @@
 		ts.tv_sec = timespec_sec_t(sec)
 		ts.tv_nsec = timespec_nsec_t(nsec)
 
-		if sem_timedwait((*_sem_t)(unsafe.Pointer(_m_.waitsema)), &ts) != 0 {
+		if sem_timedwait((*semt)(unsafe.Pointer(_m_.waitsema)), &ts) != 0 {
 			err := errno()
 			if err == _ETIMEDOUT || err == _EAGAIN || err == _EINTR {
 				return -1
@@ -96,7 +96,7 @@
 		return 0
 	}
 	for {
-		r1 := sem_wait((*_sem_t)(unsafe.Pointer(_m_.waitsema)))
+		r1 := sem_wait((*semt)(unsafe.Pointer(_m_.waitsema)))
 		if r1 == 0 {
 			break
 		}
@@ -110,7 +110,7 @@
 
 //go:nosplit
 func semawakeup(mp *m) {
-	if sem_post((*_sem_t)(unsafe.Pointer(mp.waitsema))) != 0 {
+	if sem_post((*semt)(unsafe.Pointer(mp.waitsema))) != 0 {
 		throw("sem_post")
 	}
 }
--- a/src/libgo/Makefile.am	2021-01-04 16:20:52.000000000 +0100
+++ b/src/libgo/Makefile.am	2021-01-04 16:25:57.000000000 +0100
@@ -881,7 +881,7 @@
 CHECK = \
 	GC="$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs"; \
 	export GC; \
-	GOLIBS="$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(MATH_LIBS) $(NET_LIBS) $(LIBS)"; \
+	GOLIBS="$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS) $(LIBS)"; \
 	export GOLIBS; \
 	RUNTESTFLAGS="$(RUNTESTFLAGS)"; \
 	export RUNTESTFLAGS; \
--- a/src/libgo/Makefile.in	2021-01-04 16:20:52.000000000 +0100
+++ b/src/libgo/Makefile.in	2021-01-04 16:26:29.000000000 +0100
@@ -1029,7 +1029,7 @@
 CHECK = \
 	GC="$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs"; \
 	export GC; \
-	GOLIBS="$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(MATH_LIBS) $(NET_LIBS) $(LIBS)"; \
+	GOLIBS="$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS) $(LIBS)"; \
 	export GOLIBS; \
 	RUNTESTFLAGS="$(RUNTESTFLAGS)"; \
 	export RUNTESTFLAGS; \
